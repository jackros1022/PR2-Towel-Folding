/* Auto-generated by genmsg_cpp for file /home/karthik/karthik_sandbox/github_repos/folding/folding_msgs/msg/PolyStamped.msg */
#ifndef FOLDING_MSGS_MESSAGE_POLYSTAMPED_H
#define FOLDING_MSGS_MESSAGE_POLYSTAMPED_H
#include <string>
#include <vector>
#include <ostream>
#include "ros/serialization.h"
#include "ros/builtin_message_traits.h"
#include "ros/message_operations.h"
#include "ros/message.h"
#include "ros/time.h"

#include "std_msgs/Header.h"
#include "folding_msgs/Point2D.h"

namespace folding_msgs
{
template <class ContainerAllocator>
struct PolyStamped_ : public ros::Message
{
  typedef PolyStamped_<ContainerAllocator> Type;

  PolyStamped_()
  : header()
  , vertices()
  , z_offset(0.0)
  {
  }

  PolyStamped_(const ContainerAllocator& _alloc)
  : header(_alloc)
  , vertices(_alloc)
  , z_offset(0.0)
  {
  }

  typedef  ::std_msgs::Header_<ContainerAllocator>  _header_type;
   ::std_msgs::Header_<ContainerAllocator>  header;

  typedef std::vector< ::folding_msgs::Point2D_<ContainerAllocator> , typename ContainerAllocator::template rebind< ::folding_msgs::Point2D_<ContainerAllocator> >::other >  _vertices_type;
  std::vector< ::folding_msgs::Point2D_<ContainerAllocator> , typename ContainerAllocator::template rebind< ::folding_msgs::Point2D_<ContainerAllocator> >::other >  vertices;

  typedef double _z_offset_type;
  double z_offset;


  ROS_DEPRECATED uint32_t get_vertices_size() const { return (uint32_t)vertices.size(); }
  ROS_DEPRECATED void set_vertices_size(uint32_t size) { vertices.resize((size_t)size); }
  ROS_DEPRECATED void get_vertices_vec(std::vector< ::folding_msgs::Point2D_<ContainerAllocator> , typename ContainerAllocator::template rebind< ::folding_msgs::Point2D_<ContainerAllocator> >::other > & vec) const { vec = this->vertices; }
  ROS_DEPRECATED void set_vertices_vec(const std::vector< ::folding_msgs::Point2D_<ContainerAllocator> , typename ContainerAllocator::template rebind< ::folding_msgs::Point2D_<ContainerAllocator> >::other > & vec) { this->vertices = vec; }
private:
  static const char* __s_getDataType_() { return "folding_msgs/PolyStamped"; }
public:
  ROS_DEPRECATED static const std::string __s_getDataType() { return __s_getDataType_(); }

  ROS_DEPRECATED const std::string __getDataType() const { return __s_getDataType_(); }

private:
  static const char* __s_getMD5Sum_() { return "52bf82a1af6df03ccce898a721fbe1d5"; }
public:
  ROS_DEPRECATED static const std::string __s_getMD5Sum() { return __s_getMD5Sum_(); }

  ROS_DEPRECATED const std::string __getMD5Sum() const { return __s_getMD5Sum_(); }

private:
  static const char* __s_getMessageDefinition_() { return "Header header\n\
Point2D[] vertices\n\
float64 z_offset\n\
\n\
================================================================================\n\
MSG: std_msgs/Header\n\
# Standard metadata for higher-level stamped data types.\n\
# This is generally used to communicate timestamped data \n\
# in a particular coordinate frame.\n\
# \n\
# sequence ID: consecutively increasing ID \n\
uint32 seq\n\
#Two-integer timestamp that is expressed as:\n\
# * stamp.secs: seconds (stamp_secs) since epoch\n\
# * stamp.nsecs: nanoseconds since stamp_secs\n\
# time-handling sugar is provided by the client library\n\
time stamp\n\
#Frame this data is associated with\n\
# 0: no frame\n\
# 1: global frame\n\
string frame_id\n\
\n\
================================================================================\n\
MSG: folding_msgs/Point2D\n\
float64 x\n\
float64 y\n\
\n\
"; }
public:
  ROS_DEPRECATED static const std::string __s_getMessageDefinition() { return __s_getMessageDefinition_(); }

  ROS_DEPRECATED const std::string __getMessageDefinition() const { return __s_getMessageDefinition_(); }

  ROS_DEPRECATED virtual uint8_t *serialize(uint8_t *write_ptr, uint32_t seq) const
  {
    ros::serialization::OStream stream(write_ptr, 1000000000);
    ros::serialization::serialize(stream, header);
    ros::serialization::serialize(stream, vertices);
    ros::serialization::serialize(stream, z_offset);
    return stream.getData();
  }

  ROS_DEPRECATED virtual uint8_t *deserialize(uint8_t *read_ptr)
  {
    ros::serialization::IStream stream(read_ptr, 1000000000);
    ros::serialization::deserialize(stream, header);
    ros::serialization::deserialize(stream, vertices);
    ros::serialization::deserialize(stream, z_offset);
    return stream.getData();
  }

  ROS_DEPRECATED virtual uint32_t serializationLength() const
  {
    uint32_t size = 0;
    size += ros::serialization::serializationLength(header);
    size += ros::serialization::serializationLength(vertices);
    size += ros::serialization::serializationLength(z_offset);
    return size;
  }

  typedef boost::shared_ptr< ::folding_msgs::PolyStamped_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::folding_msgs::PolyStamped_<ContainerAllocator>  const> ConstPtr;
}; // struct PolyStamped
typedef  ::folding_msgs::PolyStamped_<std::allocator<void> > PolyStamped;

typedef boost::shared_ptr< ::folding_msgs::PolyStamped> PolyStampedPtr;
typedef boost::shared_ptr< ::folding_msgs::PolyStamped const> PolyStampedConstPtr;


template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const  ::folding_msgs::PolyStamped_<ContainerAllocator> & v)
{
  ros::message_operations::Printer< ::folding_msgs::PolyStamped_<ContainerAllocator> >::stream(s, "", v);
  return s;}

} // namespace folding_msgs

namespace ros
{
namespace message_traits
{
template<class ContainerAllocator>
struct MD5Sum< ::folding_msgs::PolyStamped_<ContainerAllocator> > {
  static const char* value() 
  {
    return "52bf82a1af6df03ccce898a721fbe1d5";
  }

  static const char* value(const  ::folding_msgs::PolyStamped_<ContainerAllocator> &) { return value(); } 
  static const uint64_t static_value1 = 0x52bf82a1af6df03cULL;
  static const uint64_t static_value2 = 0xcce898a721fbe1d5ULL;
};

template<class ContainerAllocator>
struct DataType< ::folding_msgs::PolyStamped_<ContainerAllocator> > {
  static const char* value() 
  {
    return "folding_msgs/PolyStamped";
  }

  static const char* value(const  ::folding_msgs::PolyStamped_<ContainerAllocator> &) { return value(); } 
};

template<class ContainerAllocator>
struct Definition< ::folding_msgs::PolyStamped_<ContainerAllocator> > {
  static const char* value() 
  {
    return "Header header\n\
Point2D[] vertices\n\
float64 z_offset\n\
\n\
================================================================================\n\
MSG: std_msgs/Header\n\
# Standard metadata for higher-level stamped data types.\n\
# This is generally used to communicate timestamped data \n\
# in a particular coordinate frame.\n\
# \n\
# sequence ID: consecutively increasing ID \n\
uint32 seq\n\
#Two-integer timestamp that is expressed as:\n\
# * stamp.secs: seconds (stamp_secs) since epoch\n\
# * stamp.nsecs: nanoseconds since stamp_secs\n\
# time-handling sugar is provided by the client library\n\
time stamp\n\
#Frame this data is associated with\n\
# 0: no frame\n\
# 1: global frame\n\
string frame_id\n\
\n\
================================================================================\n\
MSG: folding_msgs/Point2D\n\
float64 x\n\
float64 y\n\
\n\
";
  }

  static const char* value(const  ::folding_msgs::PolyStamped_<ContainerAllocator> &) { return value(); } 
};

template<class ContainerAllocator> struct HasHeader< ::folding_msgs::PolyStamped_<ContainerAllocator> > : public TrueType {};
template<class ContainerAllocator> struct HasHeader< const ::folding_msgs::PolyStamped_<ContainerAllocator> > : public TrueType {};
} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

template<class ContainerAllocator> struct Serializer< ::folding_msgs::PolyStamped_<ContainerAllocator> >
{
  template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
  {
    stream.next(m.header);
    stream.next(m.vertices);
    stream.next(m.z_offset);
  }

  ROS_DECLARE_ALLINONE_SERIALIZER;
}; // struct PolyStamped_
} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::folding_msgs::PolyStamped_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const  ::folding_msgs::PolyStamped_<ContainerAllocator> & v) 
  {
    s << indent << "header: ";
s << std::endl;
    Printer< ::std_msgs::Header_<ContainerAllocator> >::stream(s, indent + "  ", v.header);
    s << indent << "vertices[]" << std::endl;
    for (size_t i = 0; i < v.vertices.size(); ++i)
    {
      s << indent << "  vertices[" << i << "]: ";
      s << std::endl;
      s << indent;
      Printer< ::folding_msgs::Point2D_<ContainerAllocator> >::stream(s, indent + "    ", v.vertices[i]);
    }
    s << indent << "z_offset: ";
    Printer<double>::stream(s, indent + "  ", v.z_offset);
  }
};


} // namespace message_operations
} // namespace ros

#endif // FOLDING_MSGS_MESSAGE_POLYSTAMPED_H

