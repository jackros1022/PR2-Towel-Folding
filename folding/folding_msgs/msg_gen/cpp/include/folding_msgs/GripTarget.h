/* Auto-generated by genmsg_cpp for file /home/karthik/karthik_sandbox/github_repos/folding/folding_msgs/msg/GripTarget.msg */
#ifndef FOLDING_MSGS_MESSAGE_GRIPTARGET_H
#define FOLDING_MSGS_MESSAGE_GRIPTARGET_H
#include <string>
#include <vector>
#include <ostream>
#include "ros/serialization.h"
#include "ros/builtin_message_traits.h"
#include "ros/message_operations.h"
#include "ros/message.h"
#include "ros/time.h"

#include "geometry_msgs/PointStamped.h"

namespace folding_msgs
{
template <class ContainerAllocator>
struct GripTarget_ : public ros::Message
{
  typedef GripTarget_<ContainerAllocator> Type;

  GripTarget_()
  : point()
  , arm()
  , grip(false)
  , pitch(0.0)
  , roll(0.0)
  , yaw(0.0)
  , empty(false)
  {
  }

  GripTarget_(const ContainerAllocator& _alloc)
  : point(_alloc)
  , arm(_alloc)
  , grip(false)
  , pitch(0.0)
  , roll(0.0)
  , yaw(0.0)
  , empty(false)
  {
  }

  typedef  ::geometry_msgs::PointStamped_<ContainerAllocator>  _point_type;
   ::geometry_msgs::PointStamped_<ContainerAllocator>  point;

  typedef std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other >  _arm_type;
  std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other >  arm;

  typedef uint8_t _grip_type;
  uint8_t grip;

  typedef double _pitch_type;
  double pitch;

  typedef double _roll_type;
  double roll;

  typedef double _yaw_type;
  double yaw;

  typedef uint8_t _empty_type;
  uint8_t empty;


private:
  static const char* __s_getDataType_() { return "folding_msgs/GripTarget"; }
public:
  ROS_DEPRECATED static const std::string __s_getDataType() { return __s_getDataType_(); }

  ROS_DEPRECATED const std::string __getDataType() const { return __s_getDataType_(); }

private:
  static const char* __s_getMD5Sum_() { return "d498fe7192b5922bafbc9809932e496c"; }
public:
  ROS_DEPRECATED static const std::string __s_getMD5Sum() { return __s_getMD5Sum_(); }

  ROS_DEPRECATED const std::string __getMD5Sum() const { return __s_getMD5Sum_(); }

private:
  static const char* __s_getMessageDefinition_() { return "geometry_msgs/PointStamped point\n\
string arm\n\
bool grip\n\
float64 pitch\n\
float64 roll\n\
float64 yaw\n\
bool empty\n\
\n\
================================================================================\n\
MSG: geometry_msgs/PointStamped\n\
# This represents a Point with reference coordinate frame and timestamp\n\
Header header\n\
Point point\n\
\n\
================================================================================\n\
MSG: std_msgs/Header\n\
# Standard metadata for higher-level stamped data types.\n\
# This is generally used to communicate timestamped data \n\
# in a particular coordinate frame.\n\
# \n\
# sequence ID: consecutively increasing ID \n\
uint32 seq\n\
#Two-integer timestamp that is expressed as:\n\
# * stamp.secs: seconds (stamp_secs) since epoch\n\
# * stamp.nsecs: nanoseconds since stamp_secs\n\
# time-handling sugar is provided by the client library\n\
time stamp\n\
#Frame this data is associated with\n\
# 0: no frame\n\
# 1: global frame\n\
string frame_id\n\
\n\
================================================================================\n\
MSG: geometry_msgs/Point\n\
# This contains the position of a point in free space\n\
float64 x\n\
float64 y\n\
float64 z\n\
\n\
"; }
public:
  ROS_DEPRECATED static const std::string __s_getMessageDefinition() { return __s_getMessageDefinition_(); }

  ROS_DEPRECATED const std::string __getMessageDefinition() const { return __s_getMessageDefinition_(); }

  ROS_DEPRECATED virtual uint8_t *serialize(uint8_t *write_ptr, uint32_t seq) const
  {
    ros::serialization::OStream stream(write_ptr, 1000000000);
    ros::serialization::serialize(stream, point);
    ros::serialization::serialize(stream, arm);
    ros::serialization::serialize(stream, grip);
    ros::serialization::serialize(stream, pitch);
    ros::serialization::serialize(stream, roll);
    ros::serialization::serialize(stream, yaw);
    ros::serialization::serialize(stream, empty);
    return stream.getData();
  }

  ROS_DEPRECATED virtual uint8_t *deserialize(uint8_t *read_ptr)
  {
    ros::serialization::IStream stream(read_ptr, 1000000000);
    ros::serialization::deserialize(stream, point);
    ros::serialization::deserialize(stream, arm);
    ros::serialization::deserialize(stream, grip);
    ros::serialization::deserialize(stream, pitch);
    ros::serialization::deserialize(stream, roll);
    ros::serialization::deserialize(stream, yaw);
    ros::serialization::deserialize(stream, empty);
    return stream.getData();
  }

  ROS_DEPRECATED virtual uint32_t serializationLength() const
  {
    uint32_t size = 0;
    size += ros::serialization::serializationLength(point);
    size += ros::serialization::serializationLength(arm);
    size += ros::serialization::serializationLength(grip);
    size += ros::serialization::serializationLength(pitch);
    size += ros::serialization::serializationLength(roll);
    size += ros::serialization::serializationLength(yaw);
    size += ros::serialization::serializationLength(empty);
    return size;
  }

  typedef boost::shared_ptr< ::folding_msgs::GripTarget_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::folding_msgs::GripTarget_<ContainerAllocator>  const> ConstPtr;
}; // struct GripTarget
typedef  ::folding_msgs::GripTarget_<std::allocator<void> > GripTarget;

typedef boost::shared_ptr< ::folding_msgs::GripTarget> GripTargetPtr;
typedef boost::shared_ptr< ::folding_msgs::GripTarget const> GripTargetConstPtr;


template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const  ::folding_msgs::GripTarget_<ContainerAllocator> & v)
{
  ros::message_operations::Printer< ::folding_msgs::GripTarget_<ContainerAllocator> >::stream(s, "", v);
  return s;}

} // namespace folding_msgs

namespace ros
{
namespace message_traits
{
template<class ContainerAllocator>
struct MD5Sum< ::folding_msgs::GripTarget_<ContainerAllocator> > {
  static const char* value() 
  {
    return "d498fe7192b5922bafbc9809932e496c";
  }

  static const char* value(const  ::folding_msgs::GripTarget_<ContainerAllocator> &) { return value(); } 
  static const uint64_t static_value1 = 0xd498fe7192b5922bULL;
  static const uint64_t static_value2 = 0xafbc9809932e496cULL;
};

template<class ContainerAllocator>
struct DataType< ::folding_msgs::GripTarget_<ContainerAllocator> > {
  static const char* value() 
  {
    return "folding_msgs/GripTarget";
  }

  static const char* value(const  ::folding_msgs::GripTarget_<ContainerAllocator> &) { return value(); } 
};

template<class ContainerAllocator>
struct Definition< ::folding_msgs::GripTarget_<ContainerAllocator> > {
  static const char* value() 
  {
    return "geometry_msgs/PointStamped point\n\
string arm\n\
bool grip\n\
float64 pitch\n\
float64 roll\n\
float64 yaw\n\
bool empty\n\
\n\
================================================================================\n\
MSG: geometry_msgs/PointStamped\n\
# This represents a Point with reference coordinate frame and timestamp\n\
Header header\n\
Point point\n\
\n\
================================================================================\n\
MSG: std_msgs/Header\n\
# Standard metadata for higher-level stamped data types.\n\
# This is generally used to communicate timestamped data \n\
# in a particular coordinate frame.\n\
# \n\
# sequence ID: consecutively increasing ID \n\
uint32 seq\n\
#Two-integer timestamp that is expressed as:\n\
# * stamp.secs: seconds (stamp_secs) since epoch\n\
# * stamp.nsecs: nanoseconds since stamp_secs\n\
# time-handling sugar is provided by the client library\n\
time stamp\n\
#Frame this data is associated with\n\
# 0: no frame\n\
# 1: global frame\n\
string frame_id\n\
\n\
================================================================================\n\
MSG: geometry_msgs/Point\n\
# This contains the position of a point in free space\n\
float64 x\n\
float64 y\n\
float64 z\n\
\n\
";
  }

  static const char* value(const  ::folding_msgs::GripTarget_<ContainerAllocator> &) { return value(); } 
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

template<class ContainerAllocator> struct Serializer< ::folding_msgs::GripTarget_<ContainerAllocator> >
{
  template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
  {
    stream.next(m.point);
    stream.next(m.arm);
    stream.next(m.grip);
    stream.next(m.pitch);
    stream.next(m.roll);
    stream.next(m.yaw);
    stream.next(m.empty);
  }

  ROS_DECLARE_ALLINONE_SERIALIZER;
}; // struct GripTarget_
} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::folding_msgs::GripTarget_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const  ::folding_msgs::GripTarget_<ContainerAllocator> & v) 
  {
    s << indent << "point: ";
s << std::endl;
    Printer< ::geometry_msgs::PointStamped_<ContainerAllocator> >::stream(s, indent + "  ", v.point);
    s << indent << "arm: ";
    Printer<std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other > >::stream(s, indent + "  ", v.arm);
    s << indent << "grip: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.grip);
    s << indent << "pitch: ";
    Printer<double>::stream(s, indent + "  ", v.pitch);
    s << indent << "roll: ";
    Printer<double>::stream(s, indent + "  ", v.roll);
    s << indent << "yaw: ";
    Printer<double>::stream(s, indent + "  ", v.yaw);
    s << indent << "empty: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.empty);
  }
};


} // namespace message_operations
} // namespace ros

#endif // FOLDING_MSGS_MESSAGE_GRIPTARGET_H

