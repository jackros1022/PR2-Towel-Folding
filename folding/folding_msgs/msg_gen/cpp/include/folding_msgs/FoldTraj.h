/* Auto-generated by genmsg_cpp for file /home/karthik/karthik_sandbox/github_repos/folding/folding_msgs/msg/FoldTraj.msg */
#ifndef FOLDING_MSGS_MESSAGE_FOLDTRAJ_H
#define FOLDING_MSGS_MESSAGE_FOLDTRAJ_H
#include <string>
#include <vector>
#include <ostream>
#include "ros/serialization.h"
#include "ros/builtin_message_traits.h"
#include "ros/message_operations.h"
#include "ros/message.h"
#include "ros/time.h"

#include "geometry_msgs/PointStamped.h"
#include "geometry_msgs/PointStamped.h"
#include "geometry_msgs/PointStamped.h"
#include "geometry_msgs/PointStamped.h"
#include "geometry_msgs/PointStamped.h"
#include "geometry_msgs/PointStamped.h"
#include "geometry_msgs/PointStamped.h"
#include "geometry_msgs/PointStamped.h"

namespace folding_msgs
{
template <class ContainerAllocator>
struct FoldTraj_ : public ros::Message
{
  typedef FoldTraj_<ContainerAllocator> Type;

  FoldTraj_()
  : approach_points()
  , grip_points()
  , quarter_points()
  , weight_points()
  , vertical_points()
  , goal_points()
  , smooth_center()
  , smooth_edges()
  , ignore_smooth(false)
  , tilts()
  , red(false)
  {
  }

  FoldTraj_(const ContainerAllocator& _alloc)
  : approach_points(_alloc)
  , grip_points(_alloc)
  , quarter_points(_alloc)
  , weight_points(_alloc)
  , vertical_points(_alloc)
  , goal_points(_alloc)
  , smooth_center(_alloc)
  , smooth_edges(_alloc)
  , ignore_smooth(false)
  , tilts(_alloc)
  , red(false)
  {
  }

  typedef std::vector< ::geometry_msgs::PointStamped_<ContainerAllocator> , typename ContainerAllocator::template rebind< ::geometry_msgs::PointStamped_<ContainerAllocator> >::other >  _approach_points_type;
  std::vector< ::geometry_msgs::PointStamped_<ContainerAllocator> , typename ContainerAllocator::template rebind< ::geometry_msgs::PointStamped_<ContainerAllocator> >::other >  approach_points;

  typedef std::vector< ::geometry_msgs::PointStamped_<ContainerAllocator> , typename ContainerAllocator::template rebind< ::geometry_msgs::PointStamped_<ContainerAllocator> >::other >  _grip_points_type;
  std::vector< ::geometry_msgs::PointStamped_<ContainerAllocator> , typename ContainerAllocator::template rebind< ::geometry_msgs::PointStamped_<ContainerAllocator> >::other >  grip_points;

  typedef std::vector< ::geometry_msgs::PointStamped_<ContainerAllocator> , typename ContainerAllocator::template rebind< ::geometry_msgs::PointStamped_<ContainerAllocator> >::other >  _quarter_points_type;
  std::vector< ::geometry_msgs::PointStamped_<ContainerAllocator> , typename ContainerAllocator::template rebind< ::geometry_msgs::PointStamped_<ContainerAllocator> >::other >  quarter_points;

  typedef std::vector< ::geometry_msgs::PointStamped_<ContainerAllocator> , typename ContainerAllocator::template rebind< ::geometry_msgs::PointStamped_<ContainerAllocator> >::other >  _weight_points_type;
  std::vector< ::geometry_msgs::PointStamped_<ContainerAllocator> , typename ContainerAllocator::template rebind< ::geometry_msgs::PointStamped_<ContainerAllocator> >::other >  weight_points;

  typedef std::vector< ::geometry_msgs::PointStamped_<ContainerAllocator> , typename ContainerAllocator::template rebind< ::geometry_msgs::PointStamped_<ContainerAllocator> >::other >  _vertical_points_type;
  std::vector< ::geometry_msgs::PointStamped_<ContainerAllocator> , typename ContainerAllocator::template rebind< ::geometry_msgs::PointStamped_<ContainerAllocator> >::other >  vertical_points;

  typedef std::vector< ::geometry_msgs::PointStamped_<ContainerAllocator> , typename ContainerAllocator::template rebind< ::geometry_msgs::PointStamped_<ContainerAllocator> >::other >  _goal_points_type;
  std::vector< ::geometry_msgs::PointStamped_<ContainerAllocator> , typename ContainerAllocator::template rebind< ::geometry_msgs::PointStamped_<ContainerAllocator> >::other >  goal_points;

  typedef  ::geometry_msgs::PointStamped_<ContainerAllocator>  _smooth_center_type;
   ::geometry_msgs::PointStamped_<ContainerAllocator>  smooth_center;

  typedef std::vector< ::geometry_msgs::PointStamped_<ContainerAllocator> , typename ContainerAllocator::template rebind< ::geometry_msgs::PointStamped_<ContainerAllocator> >::other >  _smooth_edges_type;
  std::vector< ::geometry_msgs::PointStamped_<ContainerAllocator> , typename ContainerAllocator::template rebind< ::geometry_msgs::PointStamped_<ContainerAllocator> >::other >  smooth_edges;

  typedef uint8_t _ignore_smooth_type;
  uint8_t ignore_smooth;

  typedef std::vector<double, typename ContainerAllocator::template rebind<double>::other >  _tilts_type;
  std::vector<double, typename ContainerAllocator::template rebind<double>::other >  tilts;

  typedef uint8_t _red_type;
  uint8_t red;


  ROS_DEPRECATED uint32_t get_approach_points_size() const { return (uint32_t)approach_points.size(); }
  ROS_DEPRECATED void set_approach_points_size(uint32_t size) { approach_points.resize((size_t)size); }
  ROS_DEPRECATED void get_approach_points_vec(std::vector< ::geometry_msgs::PointStamped_<ContainerAllocator> , typename ContainerAllocator::template rebind< ::geometry_msgs::PointStamped_<ContainerAllocator> >::other > & vec) const { vec = this->approach_points; }
  ROS_DEPRECATED void set_approach_points_vec(const std::vector< ::geometry_msgs::PointStamped_<ContainerAllocator> , typename ContainerAllocator::template rebind< ::geometry_msgs::PointStamped_<ContainerAllocator> >::other > & vec) { this->approach_points = vec; }
  ROS_DEPRECATED uint32_t get_grip_points_size() const { return (uint32_t)grip_points.size(); }
  ROS_DEPRECATED void set_grip_points_size(uint32_t size) { grip_points.resize((size_t)size); }
  ROS_DEPRECATED void get_grip_points_vec(std::vector< ::geometry_msgs::PointStamped_<ContainerAllocator> , typename ContainerAllocator::template rebind< ::geometry_msgs::PointStamped_<ContainerAllocator> >::other > & vec) const { vec = this->grip_points; }
  ROS_DEPRECATED void set_grip_points_vec(const std::vector< ::geometry_msgs::PointStamped_<ContainerAllocator> , typename ContainerAllocator::template rebind< ::geometry_msgs::PointStamped_<ContainerAllocator> >::other > & vec) { this->grip_points = vec; }
  ROS_DEPRECATED uint32_t get_quarter_points_size() const { return (uint32_t)quarter_points.size(); }
  ROS_DEPRECATED void set_quarter_points_size(uint32_t size) { quarter_points.resize((size_t)size); }
  ROS_DEPRECATED void get_quarter_points_vec(std::vector< ::geometry_msgs::PointStamped_<ContainerAllocator> , typename ContainerAllocator::template rebind< ::geometry_msgs::PointStamped_<ContainerAllocator> >::other > & vec) const { vec = this->quarter_points; }
  ROS_DEPRECATED void set_quarter_points_vec(const std::vector< ::geometry_msgs::PointStamped_<ContainerAllocator> , typename ContainerAllocator::template rebind< ::geometry_msgs::PointStamped_<ContainerAllocator> >::other > & vec) { this->quarter_points = vec; }
  ROS_DEPRECATED uint32_t get_weight_points_size() const { return (uint32_t)weight_points.size(); }
  ROS_DEPRECATED void set_weight_points_size(uint32_t size) { weight_points.resize((size_t)size); }
  ROS_DEPRECATED void get_weight_points_vec(std::vector< ::geometry_msgs::PointStamped_<ContainerAllocator> , typename ContainerAllocator::template rebind< ::geometry_msgs::PointStamped_<ContainerAllocator> >::other > & vec) const { vec = this->weight_points; }
  ROS_DEPRECATED void set_weight_points_vec(const std::vector< ::geometry_msgs::PointStamped_<ContainerAllocator> , typename ContainerAllocator::template rebind< ::geometry_msgs::PointStamped_<ContainerAllocator> >::other > & vec) { this->weight_points = vec; }
  ROS_DEPRECATED uint32_t get_vertical_points_size() const { return (uint32_t)vertical_points.size(); }
  ROS_DEPRECATED void set_vertical_points_size(uint32_t size) { vertical_points.resize((size_t)size); }
  ROS_DEPRECATED void get_vertical_points_vec(std::vector< ::geometry_msgs::PointStamped_<ContainerAllocator> , typename ContainerAllocator::template rebind< ::geometry_msgs::PointStamped_<ContainerAllocator> >::other > & vec) const { vec = this->vertical_points; }
  ROS_DEPRECATED void set_vertical_points_vec(const std::vector< ::geometry_msgs::PointStamped_<ContainerAllocator> , typename ContainerAllocator::template rebind< ::geometry_msgs::PointStamped_<ContainerAllocator> >::other > & vec) { this->vertical_points = vec; }
  ROS_DEPRECATED uint32_t get_goal_points_size() const { return (uint32_t)goal_points.size(); }
  ROS_DEPRECATED void set_goal_points_size(uint32_t size) { goal_points.resize((size_t)size); }
  ROS_DEPRECATED void get_goal_points_vec(std::vector< ::geometry_msgs::PointStamped_<ContainerAllocator> , typename ContainerAllocator::template rebind< ::geometry_msgs::PointStamped_<ContainerAllocator> >::other > & vec) const { vec = this->goal_points; }
  ROS_DEPRECATED void set_goal_points_vec(const std::vector< ::geometry_msgs::PointStamped_<ContainerAllocator> , typename ContainerAllocator::template rebind< ::geometry_msgs::PointStamped_<ContainerAllocator> >::other > & vec) { this->goal_points = vec; }
  ROS_DEPRECATED uint32_t get_smooth_edges_size() const { return (uint32_t)smooth_edges.size(); }
  ROS_DEPRECATED void set_smooth_edges_size(uint32_t size) { smooth_edges.resize((size_t)size); }
  ROS_DEPRECATED void get_smooth_edges_vec(std::vector< ::geometry_msgs::PointStamped_<ContainerAllocator> , typename ContainerAllocator::template rebind< ::geometry_msgs::PointStamped_<ContainerAllocator> >::other > & vec) const { vec = this->smooth_edges; }
  ROS_DEPRECATED void set_smooth_edges_vec(const std::vector< ::geometry_msgs::PointStamped_<ContainerAllocator> , typename ContainerAllocator::template rebind< ::geometry_msgs::PointStamped_<ContainerAllocator> >::other > & vec) { this->smooth_edges = vec; }
  ROS_DEPRECATED uint32_t get_tilts_size() const { return (uint32_t)tilts.size(); }
  ROS_DEPRECATED void set_tilts_size(uint32_t size) { tilts.resize((size_t)size); }
  ROS_DEPRECATED void get_tilts_vec(std::vector<double, typename ContainerAllocator::template rebind<double>::other > & vec) const { vec = this->tilts; }
  ROS_DEPRECATED void set_tilts_vec(const std::vector<double, typename ContainerAllocator::template rebind<double>::other > & vec) { this->tilts = vec; }
private:
  static const char* __s_getDataType_() { return "folding_msgs/FoldTraj"; }
public:
  ROS_DEPRECATED static const std::string __s_getDataType() { return __s_getDataType_(); }

  ROS_DEPRECATED const std::string __getDataType() const { return __s_getDataType_(); }

private:
  static const char* __s_getMD5Sum_() { return "34989d2c245d57b9f6a53bb82f486498"; }
public:
  ROS_DEPRECATED static const std::string __s_getMD5Sum() { return __s_getMD5Sum_(); }

  ROS_DEPRECATED const std::string __getMD5Sum() const { return __s_getMD5Sum_(); }

private:
  static const char* __s_getMessageDefinition_() { return "geometry_msgs/PointStamped[] approach_points\n\
geometry_msgs/PointStamped[] grip_points\n\
geometry_msgs/PointStamped[] quarter_points\n\
geometry_msgs/PointStamped[] weight_points\n\
geometry_msgs/PointStamped[] vertical_points\n\
geometry_msgs/PointStamped[] goal_points\n\
geometry_msgs/PointStamped smooth_center\n\
geometry_msgs/PointStamped[] smooth_edges\n\
bool ignore_smooth\n\
float64[] tilts\n\
bool red\n\
\n\
================================================================================\n\
MSG: geometry_msgs/PointStamped\n\
# This represents a Point with reference coordinate frame and timestamp\n\
Header header\n\
Point point\n\
\n\
================================================================================\n\
MSG: std_msgs/Header\n\
# Standard metadata for higher-level stamped data types.\n\
# This is generally used to communicate timestamped data \n\
# in a particular coordinate frame.\n\
# \n\
# sequence ID: consecutively increasing ID \n\
uint32 seq\n\
#Two-integer timestamp that is expressed as:\n\
# * stamp.secs: seconds (stamp_secs) since epoch\n\
# * stamp.nsecs: nanoseconds since stamp_secs\n\
# time-handling sugar is provided by the client library\n\
time stamp\n\
#Frame this data is associated with\n\
# 0: no frame\n\
# 1: global frame\n\
string frame_id\n\
\n\
================================================================================\n\
MSG: geometry_msgs/Point\n\
# This contains the position of a point in free space\n\
float64 x\n\
float64 y\n\
float64 z\n\
\n\
"; }
public:
  ROS_DEPRECATED static const std::string __s_getMessageDefinition() { return __s_getMessageDefinition_(); }

  ROS_DEPRECATED const std::string __getMessageDefinition() const { return __s_getMessageDefinition_(); }

  ROS_DEPRECATED virtual uint8_t *serialize(uint8_t *write_ptr, uint32_t seq) const
  {
    ros::serialization::OStream stream(write_ptr, 1000000000);
    ros::serialization::serialize(stream, approach_points);
    ros::serialization::serialize(stream, grip_points);
    ros::serialization::serialize(stream, quarter_points);
    ros::serialization::serialize(stream, weight_points);
    ros::serialization::serialize(stream, vertical_points);
    ros::serialization::serialize(stream, goal_points);
    ros::serialization::serialize(stream, smooth_center);
    ros::serialization::serialize(stream, smooth_edges);
    ros::serialization::serialize(stream, ignore_smooth);
    ros::serialization::serialize(stream, tilts);
    ros::serialization::serialize(stream, red);
    return stream.getData();
  }

  ROS_DEPRECATED virtual uint8_t *deserialize(uint8_t *read_ptr)
  {
    ros::serialization::IStream stream(read_ptr, 1000000000);
    ros::serialization::deserialize(stream, approach_points);
    ros::serialization::deserialize(stream, grip_points);
    ros::serialization::deserialize(stream, quarter_points);
    ros::serialization::deserialize(stream, weight_points);
    ros::serialization::deserialize(stream, vertical_points);
    ros::serialization::deserialize(stream, goal_points);
    ros::serialization::deserialize(stream, smooth_center);
    ros::serialization::deserialize(stream, smooth_edges);
    ros::serialization::deserialize(stream, ignore_smooth);
    ros::serialization::deserialize(stream, tilts);
    ros::serialization::deserialize(stream, red);
    return stream.getData();
  }

  ROS_DEPRECATED virtual uint32_t serializationLength() const
  {
    uint32_t size = 0;
    size += ros::serialization::serializationLength(approach_points);
    size += ros::serialization::serializationLength(grip_points);
    size += ros::serialization::serializationLength(quarter_points);
    size += ros::serialization::serializationLength(weight_points);
    size += ros::serialization::serializationLength(vertical_points);
    size += ros::serialization::serializationLength(goal_points);
    size += ros::serialization::serializationLength(smooth_center);
    size += ros::serialization::serializationLength(smooth_edges);
    size += ros::serialization::serializationLength(ignore_smooth);
    size += ros::serialization::serializationLength(tilts);
    size += ros::serialization::serializationLength(red);
    return size;
  }

  typedef boost::shared_ptr< ::folding_msgs::FoldTraj_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::folding_msgs::FoldTraj_<ContainerAllocator>  const> ConstPtr;
}; // struct FoldTraj
typedef  ::folding_msgs::FoldTraj_<std::allocator<void> > FoldTraj;

typedef boost::shared_ptr< ::folding_msgs::FoldTraj> FoldTrajPtr;
typedef boost::shared_ptr< ::folding_msgs::FoldTraj const> FoldTrajConstPtr;


template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const  ::folding_msgs::FoldTraj_<ContainerAllocator> & v)
{
  ros::message_operations::Printer< ::folding_msgs::FoldTraj_<ContainerAllocator> >::stream(s, "", v);
  return s;}

} // namespace folding_msgs

namespace ros
{
namespace message_traits
{
template<class ContainerAllocator>
struct MD5Sum< ::folding_msgs::FoldTraj_<ContainerAllocator> > {
  static const char* value() 
  {
    return "34989d2c245d57b9f6a53bb82f486498";
  }

  static const char* value(const  ::folding_msgs::FoldTraj_<ContainerAllocator> &) { return value(); } 
  static const uint64_t static_value1 = 0x34989d2c245d57b9ULL;
  static const uint64_t static_value2 = 0xf6a53bb82f486498ULL;
};

template<class ContainerAllocator>
struct DataType< ::folding_msgs::FoldTraj_<ContainerAllocator> > {
  static const char* value() 
  {
    return "folding_msgs/FoldTraj";
  }

  static const char* value(const  ::folding_msgs::FoldTraj_<ContainerAllocator> &) { return value(); } 
};

template<class ContainerAllocator>
struct Definition< ::folding_msgs::FoldTraj_<ContainerAllocator> > {
  static const char* value() 
  {
    return "geometry_msgs/PointStamped[] approach_points\n\
geometry_msgs/PointStamped[] grip_points\n\
geometry_msgs/PointStamped[] quarter_points\n\
geometry_msgs/PointStamped[] weight_points\n\
geometry_msgs/PointStamped[] vertical_points\n\
geometry_msgs/PointStamped[] goal_points\n\
geometry_msgs/PointStamped smooth_center\n\
geometry_msgs/PointStamped[] smooth_edges\n\
bool ignore_smooth\n\
float64[] tilts\n\
bool red\n\
\n\
================================================================================\n\
MSG: geometry_msgs/PointStamped\n\
# This represents a Point with reference coordinate frame and timestamp\n\
Header header\n\
Point point\n\
\n\
================================================================================\n\
MSG: std_msgs/Header\n\
# Standard metadata for higher-level stamped data types.\n\
# This is generally used to communicate timestamped data \n\
# in a particular coordinate frame.\n\
# \n\
# sequence ID: consecutively increasing ID \n\
uint32 seq\n\
#Two-integer timestamp that is expressed as:\n\
# * stamp.secs: seconds (stamp_secs) since epoch\n\
# * stamp.nsecs: nanoseconds since stamp_secs\n\
# time-handling sugar is provided by the client library\n\
time stamp\n\
#Frame this data is associated with\n\
# 0: no frame\n\
# 1: global frame\n\
string frame_id\n\
\n\
================================================================================\n\
MSG: geometry_msgs/Point\n\
# This contains the position of a point in free space\n\
float64 x\n\
float64 y\n\
float64 z\n\
\n\
";
  }

  static const char* value(const  ::folding_msgs::FoldTraj_<ContainerAllocator> &) { return value(); } 
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

template<class ContainerAllocator> struct Serializer< ::folding_msgs::FoldTraj_<ContainerAllocator> >
{
  template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
  {
    stream.next(m.approach_points);
    stream.next(m.grip_points);
    stream.next(m.quarter_points);
    stream.next(m.weight_points);
    stream.next(m.vertical_points);
    stream.next(m.goal_points);
    stream.next(m.smooth_center);
    stream.next(m.smooth_edges);
    stream.next(m.ignore_smooth);
    stream.next(m.tilts);
    stream.next(m.red);
  }

  ROS_DECLARE_ALLINONE_SERIALIZER;
}; // struct FoldTraj_
} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::folding_msgs::FoldTraj_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const  ::folding_msgs::FoldTraj_<ContainerAllocator> & v) 
  {
    s << indent << "approach_points[]" << std::endl;
    for (size_t i = 0; i < v.approach_points.size(); ++i)
    {
      s << indent << "  approach_points[" << i << "]: ";
      s << std::endl;
      s << indent;
      Printer< ::geometry_msgs::PointStamped_<ContainerAllocator> >::stream(s, indent + "    ", v.approach_points[i]);
    }
    s << indent << "grip_points[]" << std::endl;
    for (size_t i = 0; i < v.grip_points.size(); ++i)
    {
      s << indent << "  grip_points[" << i << "]: ";
      s << std::endl;
      s << indent;
      Printer< ::geometry_msgs::PointStamped_<ContainerAllocator> >::stream(s, indent + "    ", v.grip_points[i]);
    }
    s << indent << "quarter_points[]" << std::endl;
    for (size_t i = 0; i < v.quarter_points.size(); ++i)
    {
      s << indent << "  quarter_points[" << i << "]: ";
      s << std::endl;
      s << indent;
      Printer< ::geometry_msgs::PointStamped_<ContainerAllocator> >::stream(s, indent + "    ", v.quarter_points[i]);
    }
    s << indent << "weight_points[]" << std::endl;
    for (size_t i = 0; i < v.weight_points.size(); ++i)
    {
      s << indent << "  weight_points[" << i << "]: ";
      s << std::endl;
      s << indent;
      Printer< ::geometry_msgs::PointStamped_<ContainerAllocator> >::stream(s, indent + "    ", v.weight_points[i]);
    }
    s << indent << "vertical_points[]" << std::endl;
    for (size_t i = 0; i < v.vertical_points.size(); ++i)
    {
      s << indent << "  vertical_points[" << i << "]: ";
      s << std::endl;
      s << indent;
      Printer< ::geometry_msgs::PointStamped_<ContainerAllocator> >::stream(s, indent + "    ", v.vertical_points[i]);
    }
    s << indent << "goal_points[]" << std::endl;
    for (size_t i = 0; i < v.goal_points.size(); ++i)
    {
      s << indent << "  goal_points[" << i << "]: ";
      s << std::endl;
      s << indent;
      Printer< ::geometry_msgs::PointStamped_<ContainerAllocator> >::stream(s, indent + "    ", v.goal_points[i]);
    }
    s << indent << "smooth_center: ";
s << std::endl;
    Printer< ::geometry_msgs::PointStamped_<ContainerAllocator> >::stream(s, indent + "  ", v.smooth_center);
    s << indent << "smooth_edges[]" << std::endl;
    for (size_t i = 0; i < v.smooth_edges.size(); ++i)
    {
      s << indent << "  smooth_edges[" << i << "]: ";
      s << std::endl;
      s << indent;
      Printer< ::geometry_msgs::PointStamped_<ContainerAllocator> >::stream(s, indent + "    ", v.smooth_edges[i]);
    }
    s << indent << "ignore_smooth: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.ignore_smooth);
    s << indent << "tilts[]" << std::endl;
    for (size_t i = 0; i < v.tilts.size(); ++i)
    {
      s << indent << "  tilts[" << i << "]: ";
      Printer<double>::stream(s, indent + "  ", v.tilts[i]);
    }
    s << indent << "red: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.red);
  }
};


} // namespace message_operations
} // namespace ros

#endif // FOLDING_MSGS_MESSAGE_FOLDTRAJ_H

