/* Auto-generated by genmsg_cpp for file /home/karthik/karthik_sandbox/github_repos/folding/folding_msgs/msg/Line2D.msg */
#ifndef FOLDING_MSGS_MESSAGE_LINE2D_H
#define FOLDING_MSGS_MESSAGE_LINE2D_H
#include <string>
#include <vector>
#include <ostream>
#include "ros/serialization.h"
#include "ros/builtin_message_traits.h"
#include "ros/message_operations.h"
#include "ros/message.h"
#include "ros/time.h"


namespace folding_msgs
{
template <class ContainerAllocator>
struct Line2D_ : public ros::Message
{
  typedef Line2D_<ContainerAllocator> Type;

  Line2D_()
  : a(0.0)
  , b(0.0)
  , c(0.0)
  {
  }

  Line2D_(const ContainerAllocator& _alloc)
  : a(0.0)
  , b(0.0)
  , c(0.0)
  {
  }

  typedef double _a_type;
  double a;

  typedef double _b_type;
  double b;

  typedef double _c_type;
  double c;


private:
  static const char* __s_getDataType_() { return "folding_msgs/Line2D"; }
public:
  ROS_DEPRECATED static const std::string __s_getDataType() { return __s_getDataType_(); }

  ROS_DEPRECATED const std::string __getDataType() const { return __s_getDataType_(); }

private:
  static const char* __s_getMD5Sum_() { return "6ffac936c9b4e668039d250d853dc9b2"; }
public:
  ROS_DEPRECATED static const std::string __s_getMD5Sum() { return __s_getMD5Sum_(); }

  ROS_DEPRECATED const std::string __getMD5Sum() const { return __s_getMD5Sum_(); }

private:
  static const char* __s_getMessageDefinition_() { return "float64 a\n\
float64 b\n\
float64 c\n\
\n\
"; }
public:
  ROS_DEPRECATED static const std::string __s_getMessageDefinition() { return __s_getMessageDefinition_(); }

  ROS_DEPRECATED const std::string __getMessageDefinition() const { return __s_getMessageDefinition_(); }

  ROS_DEPRECATED virtual uint8_t *serialize(uint8_t *write_ptr, uint32_t seq) const
  {
    ros::serialization::OStream stream(write_ptr, 1000000000);
    ros::serialization::serialize(stream, a);
    ros::serialization::serialize(stream, b);
    ros::serialization::serialize(stream, c);
    return stream.getData();
  }

  ROS_DEPRECATED virtual uint8_t *deserialize(uint8_t *read_ptr)
  {
    ros::serialization::IStream stream(read_ptr, 1000000000);
    ros::serialization::deserialize(stream, a);
    ros::serialization::deserialize(stream, b);
    ros::serialization::deserialize(stream, c);
    return stream.getData();
  }

  ROS_DEPRECATED virtual uint32_t serializationLength() const
  {
    uint32_t size = 0;
    size += ros::serialization::serializationLength(a);
    size += ros::serialization::serializationLength(b);
    size += ros::serialization::serializationLength(c);
    return size;
  }

  typedef boost::shared_ptr< ::folding_msgs::Line2D_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::folding_msgs::Line2D_<ContainerAllocator>  const> ConstPtr;
}; // struct Line2D
typedef  ::folding_msgs::Line2D_<std::allocator<void> > Line2D;

typedef boost::shared_ptr< ::folding_msgs::Line2D> Line2DPtr;
typedef boost::shared_ptr< ::folding_msgs::Line2D const> Line2DConstPtr;


template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const  ::folding_msgs::Line2D_<ContainerAllocator> & v)
{
  ros::message_operations::Printer< ::folding_msgs::Line2D_<ContainerAllocator> >::stream(s, "", v);
  return s;}

} // namespace folding_msgs

namespace ros
{
namespace message_traits
{
template<class ContainerAllocator>
struct MD5Sum< ::folding_msgs::Line2D_<ContainerAllocator> > {
  static const char* value() 
  {
    return "6ffac936c9b4e668039d250d853dc9b2";
  }

  static const char* value(const  ::folding_msgs::Line2D_<ContainerAllocator> &) { return value(); } 
  static const uint64_t static_value1 = 0x6ffac936c9b4e668ULL;
  static const uint64_t static_value2 = 0x039d250d853dc9b2ULL;
};

template<class ContainerAllocator>
struct DataType< ::folding_msgs::Line2D_<ContainerAllocator> > {
  static const char* value() 
  {
    return "folding_msgs/Line2D";
  }

  static const char* value(const  ::folding_msgs::Line2D_<ContainerAllocator> &) { return value(); } 
};

template<class ContainerAllocator>
struct Definition< ::folding_msgs::Line2D_<ContainerAllocator> > {
  static const char* value() 
  {
    return "float64 a\n\
float64 b\n\
float64 c\n\
\n\
";
  }

  static const char* value(const  ::folding_msgs::Line2D_<ContainerAllocator> &) { return value(); } 
};

template<class ContainerAllocator> struct IsFixedSize< ::folding_msgs::Line2D_<ContainerAllocator> > : public TrueType {};
} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

template<class ContainerAllocator> struct Serializer< ::folding_msgs::Line2D_<ContainerAllocator> >
{
  template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
  {
    stream.next(m.a);
    stream.next(m.b);
    stream.next(m.c);
  }

  ROS_DECLARE_ALLINONE_SERIALIZER;
}; // struct Line2D_
} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::folding_msgs::Line2D_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const  ::folding_msgs::Line2D_<ContainerAllocator> & v) 
  {
    s << indent << "a: ";
    Printer<double>::stream(s, indent + "  ", v.a);
    s << indent << "b: ";
    Printer<double>::stream(s, indent + "  ", v.b);
    s << indent << "c: ";
    Printer<double>::stream(s, indent + "  ", v.c);
  }
};


} // namespace message_operations
} // namespace ros

#endif // FOLDING_MSGS_MESSAGE_LINE2D_H

