"""autogenerated by genmsg_py from GripsTarget.msg. Do not edit."""
import roslib.message
import struct

import geometry_msgs.msg
import folding_msgs.msg
import std_msgs.msg

class GripsTarget(roslib.message.Message):
  _md5sum = "05ff55cecb9155554097e097eaf570d9"
  _type = "folding_msgs/GripsTarget"
  _has_header = False #flag to mark the presence of a Header object
  _full_text = """GripTarget l_target
GripTarget r_target

================================================================================
MSG: folding_msgs/GripTarget
geometry_msgs/PointStamped point
string arm
bool grip
float64 pitch
float64 roll
float64 yaw
bool empty

================================================================================
MSG: geometry_msgs/PointStamped
# This represents a Point with reference coordinate frame and timestamp
Header header
Point point

================================================================================
MSG: std_msgs/Header
# Standard metadata for higher-level stamped data types.
# This is generally used to communicate timestamped data 
# in a particular coordinate frame.
# 
# sequence ID: consecutively increasing ID 
uint32 seq
#Two-integer timestamp that is expressed as:
# * stamp.secs: seconds (stamp_secs) since epoch
# * stamp.nsecs: nanoseconds since stamp_secs
# time-handling sugar is provided by the client library
time stamp
#Frame this data is associated with
# 0: no frame
# 1: global frame
string frame_id

================================================================================
MSG: geometry_msgs/Point
# This contains the position of a point in free space
float64 x
float64 y
float64 z

"""
  __slots__ = ['l_target','r_target']
  _slot_types = ['folding_msgs/GripTarget','folding_msgs/GripTarget']

  def __init__(self, *args, **kwds):
    """
    Constructor. Any message fields that are implicitly/explicitly
    set to None will be assigned a default value. The recommend
    use is keyword arguments as this is more robust to future message
    changes.  You cannot mix in-order arguments and keyword arguments.
    
    The available fields are:
       l_target,r_target
    
    @param args: complete set of field values, in .msg order
    @param kwds: use keyword arguments corresponding to message field names
    to set specific fields. 
    """
    if args or kwds:
      super(GripsTarget, self).__init__(*args, **kwds)
      #message fields cannot be None, assign default values for those that are
      if self.l_target is None:
        self.l_target = folding_msgs.msg.GripTarget()
      if self.r_target is None:
        self.r_target = folding_msgs.msg.GripTarget()
    else:
      self.l_target = folding_msgs.msg.GripTarget()
      self.r_target = folding_msgs.msg.GripTarget()

  def _get_types(self):
    """
    internal API method
    """
    return self._slot_types

  def serialize(self, buff):
    """
    serialize message into buffer
    @param buff: buffer
    @type  buff: StringIO
    """
    try:
      _x = self
      buff.write(_struct_3I.pack(_x.l_target.point.header.seq, _x.l_target.point.header.stamp.secs, _x.l_target.point.header.stamp.nsecs))
      _x = self.l_target.point.header.frame_id
      length = len(_x)
      buff.write(struct.pack('<I%ss'%length, length, _x))
      _x = self
      buff.write(_struct_3d.pack(_x.l_target.point.point.x, _x.l_target.point.point.y, _x.l_target.point.point.z))
      _x = self.l_target.arm
      length = len(_x)
      buff.write(struct.pack('<I%ss'%length, length, _x))
      _x = self
      buff.write(_struct_B3dB3I.pack(_x.l_target.grip, _x.l_target.pitch, _x.l_target.roll, _x.l_target.yaw, _x.l_target.empty, _x.r_target.point.header.seq, _x.r_target.point.header.stamp.secs, _x.r_target.point.header.stamp.nsecs))
      _x = self.r_target.point.header.frame_id
      length = len(_x)
      buff.write(struct.pack('<I%ss'%length, length, _x))
      _x = self
      buff.write(_struct_3d.pack(_x.r_target.point.point.x, _x.r_target.point.point.y, _x.r_target.point.point.z))
      _x = self.r_target.arm
      length = len(_x)
      buff.write(struct.pack('<I%ss'%length, length, _x))
      _x = self
      buff.write(_struct_B3dB.pack(_x.r_target.grip, _x.r_target.pitch, _x.r_target.roll, _x.r_target.yaw, _x.r_target.empty))
    except struct.error, se: self._check_types(se)
    except TypeError, te: self._check_types(te)

  def deserialize(self, str):
    """
    unpack serialized message in str into this message instance
    @param str: byte array of serialized message
    @type  str: str
    """
    try:
      if self.l_target is None:
        self.l_target = folding_msgs.msg.GripTarget()
      if self.r_target is None:
        self.r_target = folding_msgs.msg.GripTarget()
      end = 0
      _x = self
      start = end
      end += 12
      (_x.l_target.point.header.seq, _x.l_target.point.header.stamp.secs, _x.l_target.point.header.stamp.nsecs,) = _struct_3I.unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      self.l_target.point.header.frame_id = str[start:end]
      _x = self
      start = end
      end += 24
      (_x.l_target.point.point.x, _x.l_target.point.point.y, _x.l_target.point.point.z,) = _struct_3d.unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      self.l_target.arm = str[start:end]
      _x = self
      start = end
      end += 38
      (_x.l_target.grip, _x.l_target.pitch, _x.l_target.roll, _x.l_target.yaw, _x.l_target.empty, _x.r_target.point.header.seq, _x.r_target.point.header.stamp.secs, _x.r_target.point.header.stamp.nsecs,) = _struct_B3dB3I.unpack(str[start:end])
      self.l_target.grip = bool(self.l_target.grip)
      self.l_target.empty = bool(self.l_target.empty)
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      self.r_target.point.header.frame_id = str[start:end]
      _x = self
      start = end
      end += 24
      (_x.r_target.point.point.x, _x.r_target.point.point.y, _x.r_target.point.point.z,) = _struct_3d.unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      self.r_target.arm = str[start:end]
      _x = self
      start = end
      end += 26
      (_x.r_target.grip, _x.r_target.pitch, _x.r_target.roll, _x.r_target.yaw, _x.r_target.empty,) = _struct_B3dB.unpack(str[start:end])
      self.r_target.grip = bool(self.r_target.grip)
      self.r_target.empty = bool(self.r_target.empty)
      return self
    except struct.error, e:
      raise roslib.message.DeserializationError(e) #most likely buffer underfill


  def serialize_numpy(self, buff, numpy):
    """
    serialize message with numpy array types into buffer
    @param buff: buffer
    @type  buff: StringIO
    @param numpy: numpy python module
    @type  numpy module
    """
    try:
      _x = self
      buff.write(_struct_3I.pack(_x.l_target.point.header.seq, _x.l_target.point.header.stamp.secs, _x.l_target.point.header.stamp.nsecs))
      _x = self.l_target.point.header.frame_id
      length = len(_x)
      buff.write(struct.pack('<I%ss'%length, length, _x))
      _x = self
      buff.write(_struct_3d.pack(_x.l_target.point.point.x, _x.l_target.point.point.y, _x.l_target.point.point.z))
      _x = self.l_target.arm
      length = len(_x)
      buff.write(struct.pack('<I%ss'%length, length, _x))
      _x = self
      buff.write(_struct_B3dB3I.pack(_x.l_target.grip, _x.l_target.pitch, _x.l_target.roll, _x.l_target.yaw, _x.l_target.empty, _x.r_target.point.header.seq, _x.r_target.point.header.stamp.secs, _x.r_target.point.header.stamp.nsecs))
      _x = self.r_target.point.header.frame_id
      length = len(_x)
      buff.write(struct.pack('<I%ss'%length, length, _x))
      _x = self
      buff.write(_struct_3d.pack(_x.r_target.point.point.x, _x.r_target.point.point.y, _x.r_target.point.point.z))
      _x = self.r_target.arm
      length = len(_x)
      buff.write(struct.pack('<I%ss'%length, length, _x))
      _x = self
      buff.write(_struct_B3dB.pack(_x.r_target.grip, _x.r_target.pitch, _x.r_target.roll, _x.r_target.yaw, _x.r_target.empty))
    except struct.error, se: self._check_types(se)
    except TypeError, te: self._check_types(te)

  def deserialize_numpy(self, str, numpy):
    """
    unpack serialized message in str into this message instance using numpy for array types
    @param str: byte array of serialized message
    @type  str: str
    @param numpy: numpy python module
    @type  numpy: module
    """
    try:
      if self.l_target is None:
        self.l_target = folding_msgs.msg.GripTarget()
      if self.r_target is None:
        self.r_target = folding_msgs.msg.GripTarget()
      end = 0
      _x = self
      start = end
      end += 12
      (_x.l_target.point.header.seq, _x.l_target.point.header.stamp.secs, _x.l_target.point.header.stamp.nsecs,) = _struct_3I.unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      self.l_target.point.header.frame_id = str[start:end]
      _x = self
      start = end
      end += 24
      (_x.l_target.point.point.x, _x.l_target.point.point.y, _x.l_target.point.point.z,) = _struct_3d.unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      self.l_target.arm = str[start:end]
      _x = self
      start = end
      end += 38
      (_x.l_target.grip, _x.l_target.pitch, _x.l_target.roll, _x.l_target.yaw, _x.l_target.empty, _x.r_target.point.header.seq, _x.r_target.point.header.stamp.secs, _x.r_target.point.header.stamp.nsecs,) = _struct_B3dB3I.unpack(str[start:end])
      self.l_target.grip = bool(self.l_target.grip)
      self.l_target.empty = bool(self.l_target.empty)
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      self.r_target.point.header.frame_id = str[start:end]
      _x = self
      start = end
      end += 24
      (_x.r_target.point.point.x, _x.r_target.point.point.y, _x.r_target.point.point.z,) = _struct_3d.unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      self.r_target.arm = str[start:end]
      _x = self
      start = end
      end += 26
      (_x.r_target.grip, _x.r_target.pitch, _x.r_target.roll, _x.r_target.yaw, _x.r_target.empty,) = _struct_B3dB.unpack(str[start:end])
      self.r_target.grip = bool(self.r_target.grip)
      self.r_target.empty = bool(self.r_target.empty)
      return self
    except struct.error, e:
      raise roslib.message.DeserializationError(e) #most likely buffer underfill

_struct_I = roslib.message.struct_I
_struct_B3dB3I = struct.Struct("<B3dB3I")
_struct_3I = struct.Struct("<3I")
_struct_B3dB = struct.Struct("<B3dB")
_struct_3d = struct.Struct("<3d")
