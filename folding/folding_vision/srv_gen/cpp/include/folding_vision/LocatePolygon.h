/* Auto-generated by genmsg_cpp for file /home/karthik/karthik_sandbox/github_repos/folding/folding_vision/srv/LocatePolygon.srv */
#ifndef FOLDING_VISION_SERVICE_LOCATEPOLYGON_H
#define FOLDING_VISION_SERVICE_LOCATEPOLYGON_H
#include <string>
#include <vector>
#include <ostream>
#include "ros/serialization.h"
#include "ros/builtin_message_traits.h"
#include "ros/message_operations.h"
#include "ros/message.h"
#include "ros/time.h"

#include "ros/service_traits.h"




namespace folding_vision
{
template <class ContainerAllocator>
struct LocatePolygonRequest_ : public ros::Message
{
  typedef LocatePolygonRequest_<ContainerAllocator> Type;

  LocatePolygonRequest_()
  {
  }

  LocatePolygonRequest_(const ContainerAllocator& _alloc)
  {
  }


private:
  static const char* __s_getDataType_() { return "folding_vision/LocatePolygonRequest"; }
public:
  ROS_DEPRECATED static const std::string __s_getDataType() { return __s_getDataType_(); }

  ROS_DEPRECATED const std::string __getDataType() const { return __s_getDataType_(); }

private:
  static const char* __s_getMD5Sum_() { return "d41d8cd98f00b204e9800998ecf8427e"; }
public:
  ROS_DEPRECATED static const std::string __s_getMD5Sum() { return __s_getMD5Sum_(); }

  ROS_DEPRECATED const std::string __getMD5Sum() const { return __s_getMD5Sum_(); }

private:
  static const char* __s_getServerMD5Sum_() { return "d41d8cd98f00b204e9800998ecf8427e"; }
public:
  ROS_DEPRECATED static const std::string __s_getServerMD5Sum() { return __s_getServerMD5Sum_(); }

  ROS_DEPRECATED const std::string __getServerMD5Sum() const { return __s_getServerMD5Sum_(); }

private:
  static const char* __s_getMessageDefinition_() { return "\n\
"; }
public:
  ROS_DEPRECATED static const std::string __s_getMessageDefinition() { return __s_getMessageDefinition_(); }

  ROS_DEPRECATED const std::string __getMessageDefinition() const { return __s_getMessageDefinition_(); }

  ROS_DEPRECATED virtual uint8_t *serialize(uint8_t *write_ptr, uint32_t seq) const
  {
    ros::serialization::OStream stream(write_ptr, 1000000000);
    return stream.getData();
  }

  ROS_DEPRECATED virtual uint8_t *deserialize(uint8_t *read_ptr)
  {
    ros::serialization::IStream stream(read_ptr, 1000000000);
    return stream.getData();
  }

  ROS_DEPRECATED virtual uint32_t serializationLength() const
  {
    uint32_t size = 0;
    return size;
  }

  typedef boost::shared_ptr< ::folding_vision::LocatePolygonRequest_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::folding_vision::LocatePolygonRequest_<ContainerAllocator>  const> ConstPtr;
}; // struct LocatePolygonRequest
typedef  ::folding_vision::LocatePolygonRequest_<std::allocator<void> > LocatePolygonRequest;

typedef boost::shared_ptr< ::folding_vision::LocatePolygonRequest> LocatePolygonRequestPtr;
typedef boost::shared_ptr< ::folding_vision::LocatePolygonRequest const> LocatePolygonRequestConstPtr;


template <class ContainerAllocator>
struct LocatePolygonResponse_ : public ros::Message
{
  typedef LocatePolygonResponse_<ContainerAllocator> Type;

  LocatePolygonResponse_()
  {
  }

  LocatePolygonResponse_(const ContainerAllocator& _alloc)
  {
  }


private:
  static const char* __s_getDataType_() { return "folding_vision/LocatePolygonResponse"; }
public:
  ROS_DEPRECATED static const std::string __s_getDataType() { return __s_getDataType_(); }

  ROS_DEPRECATED const std::string __getDataType() const { return __s_getDataType_(); }

private:
  static const char* __s_getMD5Sum_() { return "d41d8cd98f00b204e9800998ecf8427e"; }
public:
  ROS_DEPRECATED static const std::string __s_getMD5Sum() { return __s_getMD5Sum_(); }

  ROS_DEPRECATED const std::string __getMD5Sum() const { return __s_getMD5Sum_(); }

private:
  static const char* __s_getServerMD5Sum_() { return "d41d8cd98f00b204e9800998ecf8427e"; }
public:
  ROS_DEPRECATED static const std::string __s_getServerMD5Sum() { return __s_getServerMD5Sum_(); }

  ROS_DEPRECATED const std::string __getServerMD5Sum() const { return __s_getServerMD5Sum_(); }

private:
  static const char* __s_getMessageDefinition_() { return "\n\
\n\
"; }
public:
  ROS_DEPRECATED static const std::string __s_getMessageDefinition() { return __s_getMessageDefinition_(); }

  ROS_DEPRECATED const std::string __getMessageDefinition() const { return __s_getMessageDefinition_(); }

  ROS_DEPRECATED virtual uint8_t *serialize(uint8_t *write_ptr, uint32_t seq) const
  {
    ros::serialization::OStream stream(write_ptr, 1000000000);
    return stream.getData();
  }

  ROS_DEPRECATED virtual uint8_t *deserialize(uint8_t *read_ptr)
  {
    ros::serialization::IStream stream(read_ptr, 1000000000);
    return stream.getData();
  }

  ROS_DEPRECATED virtual uint32_t serializationLength() const
  {
    uint32_t size = 0;
    return size;
  }

  typedef boost::shared_ptr< ::folding_vision::LocatePolygonResponse_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::folding_vision::LocatePolygonResponse_<ContainerAllocator>  const> ConstPtr;
}; // struct LocatePolygonResponse
typedef  ::folding_vision::LocatePolygonResponse_<std::allocator<void> > LocatePolygonResponse;

typedef boost::shared_ptr< ::folding_vision::LocatePolygonResponse> LocatePolygonResponsePtr;
typedef boost::shared_ptr< ::folding_vision::LocatePolygonResponse const> LocatePolygonResponseConstPtr;

struct LocatePolygon
{

typedef LocatePolygonRequest Request;
typedef LocatePolygonResponse Response;
Request request;
Response response;

typedef Request RequestType;
typedef Response ResponseType;
}; // struct LocatePolygon
} // namespace folding_vision

namespace ros
{
namespace message_traits
{
template<class ContainerAllocator>
struct MD5Sum< ::folding_vision::LocatePolygonRequest_<ContainerAllocator> > {
  static const char* value() 
  {
    return "d41d8cd98f00b204e9800998ecf8427e";
  }

  static const char* value(const  ::folding_vision::LocatePolygonRequest_<ContainerAllocator> &) { return value(); } 
  static const uint64_t static_value1 = 0xd41d8cd98f00b204ULL;
  static const uint64_t static_value2 = 0xe9800998ecf8427eULL;
};

template<class ContainerAllocator>
struct DataType< ::folding_vision::LocatePolygonRequest_<ContainerAllocator> > {
  static const char* value() 
  {
    return "folding_vision/LocatePolygonRequest";
  }

  static const char* value(const  ::folding_vision::LocatePolygonRequest_<ContainerAllocator> &) { return value(); } 
};

template<class ContainerAllocator>
struct Definition< ::folding_vision::LocatePolygonRequest_<ContainerAllocator> > {
  static const char* value() 
  {
    return "\n\
";
  }

  static const char* value(const  ::folding_vision::LocatePolygonRequest_<ContainerAllocator> &) { return value(); } 
};

template<class ContainerAllocator> struct IsFixedSize< ::folding_vision::LocatePolygonRequest_<ContainerAllocator> > : public TrueType {};
} // namespace message_traits
} // namespace ros


namespace ros
{
namespace message_traits
{
template<class ContainerAllocator>
struct MD5Sum< ::folding_vision::LocatePolygonResponse_<ContainerAllocator> > {
  static const char* value() 
  {
    return "d41d8cd98f00b204e9800998ecf8427e";
  }

  static const char* value(const  ::folding_vision::LocatePolygonResponse_<ContainerAllocator> &) { return value(); } 
  static const uint64_t static_value1 = 0xd41d8cd98f00b204ULL;
  static const uint64_t static_value2 = 0xe9800998ecf8427eULL;
};

template<class ContainerAllocator>
struct DataType< ::folding_vision::LocatePolygonResponse_<ContainerAllocator> > {
  static const char* value() 
  {
    return "folding_vision/LocatePolygonResponse";
  }

  static const char* value(const  ::folding_vision::LocatePolygonResponse_<ContainerAllocator> &) { return value(); } 
};

template<class ContainerAllocator>
struct Definition< ::folding_vision::LocatePolygonResponse_<ContainerAllocator> > {
  static const char* value() 
  {
    return "\n\
\n\
";
  }

  static const char* value(const  ::folding_vision::LocatePolygonResponse_<ContainerAllocator> &) { return value(); } 
};

template<class ContainerAllocator> struct IsFixedSize< ::folding_vision::LocatePolygonResponse_<ContainerAllocator> > : public TrueType {};
} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

template<class ContainerAllocator> struct Serializer< ::folding_vision::LocatePolygonRequest_<ContainerAllocator> >
{
  template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
  {
  }

  ROS_DECLARE_ALLINONE_SERIALIZER;
}; // struct LocatePolygonRequest_
} // namespace serialization
} // namespace ros


namespace ros
{
namespace serialization
{

template<class ContainerAllocator> struct Serializer< ::folding_vision::LocatePolygonResponse_<ContainerAllocator> >
{
  template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
  {
  }

  ROS_DECLARE_ALLINONE_SERIALIZER;
}; // struct LocatePolygonResponse_
} // namespace serialization
} // namespace ros

namespace ros
{
namespace service_traits
{
template<>
struct MD5Sum<folding_vision::LocatePolygon> {
  static const char* value() 
  {
    return "d41d8cd98f00b204e9800998ecf8427e";
  }

  static const char* value(const folding_vision::LocatePolygon&) { return value(); } 
};

template<>
struct DataType<folding_vision::LocatePolygon> {
  static const char* value() 
  {
    return "folding_vision/LocatePolygon";
  }

  static const char* value(const folding_vision::LocatePolygon&) { return value(); } 
};

template<class ContainerAllocator>
struct MD5Sum<folding_vision::LocatePolygonRequest_<ContainerAllocator> > {
  static const char* value() 
  {
    return "d41d8cd98f00b204e9800998ecf8427e";
  }

  static const char* value(const folding_vision::LocatePolygonRequest_<ContainerAllocator> &) { return value(); } 
};

template<class ContainerAllocator>
struct DataType<folding_vision::LocatePolygonRequest_<ContainerAllocator> > {
  static const char* value() 
  {
    return "folding_vision/LocatePolygon";
  }

  static const char* value(const folding_vision::LocatePolygonRequest_<ContainerAllocator> &) { return value(); } 
};

template<class ContainerAllocator>
struct MD5Sum<folding_vision::LocatePolygonResponse_<ContainerAllocator> > {
  static const char* value() 
  {
    return "d41d8cd98f00b204e9800998ecf8427e";
  }

  static const char* value(const folding_vision::LocatePolygonResponse_<ContainerAllocator> &) { return value(); } 
};

template<class ContainerAllocator>
struct DataType<folding_vision::LocatePolygonResponse_<ContainerAllocator> > {
  static const char* value() 
  {
    return "folding_vision/LocatePolygon";
  }

  static const char* value(const folding_vision::LocatePolygonResponse_<ContainerAllocator> &) { return value(); } 
};

} // namespace service_traits
} // namespace ros

#endif // FOLDING_VISION_SERVICE_LOCATEPOLYGON_H

