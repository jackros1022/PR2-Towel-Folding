/* Auto-generated by genmsg_cpp for file /home/karthik/karthik_sandbox/github_repos/folding/folding_srvs/srv/GoToGrip.srv */
#ifndef FOLDING_SRVS_SERVICE_GOTOGRIP_H
#define FOLDING_SRVS_SERVICE_GOTOGRIP_H
#include <string>
#include <vector>
#include <ostream>
#include "ros/serialization.h"
#include "ros/builtin_message_traits.h"
#include "ros/message_operations.h"
#include "ros/message.h"
#include "ros/time.h"

#include "ros/service_traits.h"

#include "folding_msgs/GripsTarget.h"



namespace folding_srvs
{
template <class ContainerAllocator>
struct GoToGripRequest_ : public ros::Message
{
  typedef GoToGripRequest_<ContainerAllocator> Type;

  GoToGripRequest_()
  : target()
  {
  }

  GoToGripRequest_(const ContainerAllocator& _alloc)
  : target(_alloc)
  {
  }

  typedef  ::folding_msgs::GripsTarget_<ContainerAllocator>  _target_type;
   ::folding_msgs::GripsTarget_<ContainerAllocator>  target;


private:
  static const char* __s_getDataType_() { return "folding_srvs/GoToGripRequest"; }
public:
  ROS_DEPRECATED static const std::string __s_getDataType() { return __s_getDataType_(); }

  ROS_DEPRECATED const std::string __getDataType() const { return __s_getDataType_(); }

private:
  static const char* __s_getMD5Sum_() { return "f5dbb20018b430bbe3a516955888d392"; }
public:
  ROS_DEPRECATED static const std::string __s_getMD5Sum() { return __s_getMD5Sum_(); }

  ROS_DEPRECATED const std::string __getMD5Sum() const { return __s_getMD5Sum_(); }

private:
  static const char* __s_getServerMD5Sum_() { return "283b0415f491e6b192fcafd3d24dd27c"; }
public:
  ROS_DEPRECATED static const std::string __s_getServerMD5Sum() { return __s_getServerMD5Sum_(); }

  ROS_DEPRECATED const std::string __getServerMD5Sum() const { return __s_getServerMD5Sum_(); }

private:
  static const char* __s_getMessageDefinition_() { return "folding_msgs/GripsTarget target\n\
\n\
================================================================================\n\
MSG: folding_msgs/GripsTarget\n\
GripTarget l_target\n\
GripTarget r_target\n\
\n\
================================================================================\n\
MSG: folding_msgs/GripTarget\n\
geometry_msgs/PointStamped point\n\
string arm\n\
bool grip\n\
float64 pitch\n\
float64 roll\n\
float64 yaw\n\
bool empty\n\
\n\
================================================================================\n\
MSG: geometry_msgs/PointStamped\n\
# This represents a Point with reference coordinate frame and timestamp\n\
Header header\n\
Point point\n\
\n\
================================================================================\n\
MSG: std_msgs/Header\n\
# Standard metadata for higher-level stamped data types.\n\
# This is generally used to communicate timestamped data \n\
# in a particular coordinate frame.\n\
# \n\
# sequence ID: consecutively increasing ID \n\
uint32 seq\n\
#Two-integer timestamp that is expressed as:\n\
# * stamp.secs: seconds (stamp_secs) since epoch\n\
# * stamp.nsecs: nanoseconds since stamp_secs\n\
# time-handling sugar is provided by the client library\n\
time stamp\n\
#Frame this data is associated with\n\
# 0: no frame\n\
# 1: global frame\n\
string frame_id\n\
\n\
================================================================================\n\
MSG: geometry_msgs/Point\n\
# This contains the position of a point in free space\n\
float64 x\n\
float64 y\n\
float64 z\n\
\n\
"; }
public:
  ROS_DEPRECATED static const std::string __s_getMessageDefinition() { return __s_getMessageDefinition_(); }

  ROS_DEPRECATED const std::string __getMessageDefinition() const { return __s_getMessageDefinition_(); }

  ROS_DEPRECATED virtual uint8_t *serialize(uint8_t *write_ptr, uint32_t seq) const
  {
    ros::serialization::OStream stream(write_ptr, 1000000000);
    ros::serialization::serialize(stream, target);
    return stream.getData();
  }

  ROS_DEPRECATED virtual uint8_t *deserialize(uint8_t *read_ptr)
  {
    ros::serialization::IStream stream(read_ptr, 1000000000);
    ros::serialization::deserialize(stream, target);
    return stream.getData();
  }

  ROS_DEPRECATED virtual uint32_t serializationLength() const
  {
    uint32_t size = 0;
    size += ros::serialization::serializationLength(target);
    return size;
  }

  typedef boost::shared_ptr< ::folding_srvs::GoToGripRequest_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::folding_srvs::GoToGripRequest_<ContainerAllocator>  const> ConstPtr;
}; // struct GoToGripRequest
typedef  ::folding_srvs::GoToGripRequest_<std::allocator<void> > GoToGripRequest;

typedef boost::shared_ptr< ::folding_srvs::GoToGripRequest> GoToGripRequestPtr;
typedef boost::shared_ptr< ::folding_srvs::GoToGripRequest const> GoToGripRequestConstPtr;


template <class ContainerAllocator>
struct GoToGripResponse_ : public ros::Message
{
  typedef GoToGripResponse_<ContainerAllocator> Type;

  GoToGripResponse_()
  : success(false)
  {
  }

  GoToGripResponse_(const ContainerAllocator& _alloc)
  : success(false)
  {
  }

  typedef uint8_t _success_type;
  uint8_t success;


private:
  static const char* __s_getDataType_() { return "folding_srvs/GoToGripResponse"; }
public:
  ROS_DEPRECATED static const std::string __s_getDataType() { return __s_getDataType_(); }

  ROS_DEPRECATED const std::string __getDataType() const { return __s_getDataType_(); }

private:
  static const char* __s_getMD5Sum_() { return "358e233cde0c8a8bcfea4ce193f8fc15"; }
public:
  ROS_DEPRECATED static const std::string __s_getMD5Sum() { return __s_getMD5Sum_(); }

  ROS_DEPRECATED const std::string __getMD5Sum() const { return __s_getMD5Sum_(); }

private:
  static const char* __s_getServerMD5Sum_() { return "283b0415f491e6b192fcafd3d24dd27c"; }
public:
  ROS_DEPRECATED static const std::string __s_getServerMD5Sum() { return __s_getServerMD5Sum_(); }

  ROS_DEPRECATED const std::string __getServerMD5Sum() const { return __s_getServerMD5Sum_(); }

private:
  static const char* __s_getMessageDefinition_() { return "bool success\n\
\n\
\n\
"; }
public:
  ROS_DEPRECATED static const std::string __s_getMessageDefinition() { return __s_getMessageDefinition_(); }

  ROS_DEPRECATED const std::string __getMessageDefinition() const { return __s_getMessageDefinition_(); }

  ROS_DEPRECATED virtual uint8_t *serialize(uint8_t *write_ptr, uint32_t seq) const
  {
    ros::serialization::OStream stream(write_ptr, 1000000000);
    ros::serialization::serialize(stream, success);
    return stream.getData();
  }

  ROS_DEPRECATED virtual uint8_t *deserialize(uint8_t *read_ptr)
  {
    ros::serialization::IStream stream(read_ptr, 1000000000);
    ros::serialization::deserialize(stream, success);
    return stream.getData();
  }

  ROS_DEPRECATED virtual uint32_t serializationLength() const
  {
    uint32_t size = 0;
    size += ros::serialization::serializationLength(success);
    return size;
  }

  typedef boost::shared_ptr< ::folding_srvs::GoToGripResponse_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::folding_srvs::GoToGripResponse_<ContainerAllocator>  const> ConstPtr;
}; // struct GoToGripResponse
typedef  ::folding_srvs::GoToGripResponse_<std::allocator<void> > GoToGripResponse;

typedef boost::shared_ptr< ::folding_srvs::GoToGripResponse> GoToGripResponsePtr;
typedef boost::shared_ptr< ::folding_srvs::GoToGripResponse const> GoToGripResponseConstPtr;

struct GoToGrip
{

typedef GoToGripRequest Request;
typedef GoToGripResponse Response;
Request request;
Response response;

typedef Request RequestType;
typedef Response ResponseType;
}; // struct GoToGrip
} // namespace folding_srvs

namespace ros
{
namespace message_traits
{
template<class ContainerAllocator>
struct MD5Sum< ::folding_srvs::GoToGripRequest_<ContainerAllocator> > {
  static const char* value() 
  {
    return "f5dbb20018b430bbe3a516955888d392";
  }

  static const char* value(const  ::folding_srvs::GoToGripRequest_<ContainerAllocator> &) { return value(); } 
  static const uint64_t static_value1 = 0xf5dbb20018b430bbULL;
  static const uint64_t static_value2 = 0xe3a516955888d392ULL;
};

template<class ContainerAllocator>
struct DataType< ::folding_srvs::GoToGripRequest_<ContainerAllocator> > {
  static const char* value() 
  {
    return "folding_srvs/GoToGripRequest";
  }

  static const char* value(const  ::folding_srvs::GoToGripRequest_<ContainerAllocator> &) { return value(); } 
};

template<class ContainerAllocator>
struct Definition< ::folding_srvs::GoToGripRequest_<ContainerAllocator> > {
  static const char* value() 
  {
    return "folding_msgs/GripsTarget target\n\
\n\
================================================================================\n\
MSG: folding_msgs/GripsTarget\n\
GripTarget l_target\n\
GripTarget r_target\n\
\n\
================================================================================\n\
MSG: folding_msgs/GripTarget\n\
geometry_msgs/PointStamped point\n\
string arm\n\
bool grip\n\
float64 pitch\n\
float64 roll\n\
float64 yaw\n\
bool empty\n\
\n\
================================================================================\n\
MSG: geometry_msgs/PointStamped\n\
# This represents a Point with reference coordinate frame and timestamp\n\
Header header\n\
Point point\n\
\n\
================================================================================\n\
MSG: std_msgs/Header\n\
# Standard metadata for higher-level stamped data types.\n\
# This is generally used to communicate timestamped data \n\
# in a particular coordinate frame.\n\
# \n\
# sequence ID: consecutively increasing ID \n\
uint32 seq\n\
#Two-integer timestamp that is expressed as:\n\
# * stamp.secs: seconds (stamp_secs) since epoch\n\
# * stamp.nsecs: nanoseconds since stamp_secs\n\
# time-handling sugar is provided by the client library\n\
time stamp\n\
#Frame this data is associated with\n\
# 0: no frame\n\
# 1: global frame\n\
string frame_id\n\
\n\
================================================================================\n\
MSG: geometry_msgs/Point\n\
# This contains the position of a point in free space\n\
float64 x\n\
float64 y\n\
float64 z\n\
\n\
";
  }

  static const char* value(const  ::folding_srvs::GoToGripRequest_<ContainerAllocator> &) { return value(); } 
};

} // namespace message_traits
} // namespace ros


namespace ros
{
namespace message_traits
{
template<class ContainerAllocator>
struct MD5Sum< ::folding_srvs::GoToGripResponse_<ContainerAllocator> > {
  static const char* value() 
  {
    return "358e233cde0c8a8bcfea4ce193f8fc15";
  }

  static const char* value(const  ::folding_srvs::GoToGripResponse_<ContainerAllocator> &) { return value(); } 
  static const uint64_t static_value1 = 0x358e233cde0c8a8bULL;
  static const uint64_t static_value2 = 0xcfea4ce193f8fc15ULL;
};

template<class ContainerAllocator>
struct DataType< ::folding_srvs::GoToGripResponse_<ContainerAllocator> > {
  static const char* value() 
  {
    return "folding_srvs/GoToGripResponse";
  }

  static const char* value(const  ::folding_srvs::GoToGripResponse_<ContainerAllocator> &) { return value(); } 
};

template<class ContainerAllocator>
struct Definition< ::folding_srvs::GoToGripResponse_<ContainerAllocator> > {
  static const char* value() 
  {
    return "bool success\n\
\n\
\n\
";
  }

  static const char* value(const  ::folding_srvs::GoToGripResponse_<ContainerAllocator> &) { return value(); } 
};

template<class ContainerAllocator> struct IsFixedSize< ::folding_srvs::GoToGripResponse_<ContainerAllocator> > : public TrueType {};
} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

template<class ContainerAllocator> struct Serializer< ::folding_srvs::GoToGripRequest_<ContainerAllocator> >
{
  template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
  {
    stream.next(m.target);
  }

  ROS_DECLARE_ALLINONE_SERIALIZER;
}; // struct GoToGripRequest_
} // namespace serialization
} // namespace ros


namespace ros
{
namespace serialization
{

template<class ContainerAllocator> struct Serializer< ::folding_srvs::GoToGripResponse_<ContainerAllocator> >
{
  template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
  {
    stream.next(m.success);
  }

  ROS_DECLARE_ALLINONE_SERIALIZER;
}; // struct GoToGripResponse_
} // namespace serialization
} // namespace ros

namespace ros
{
namespace service_traits
{
template<>
struct MD5Sum<folding_srvs::GoToGrip> {
  static const char* value() 
  {
    return "283b0415f491e6b192fcafd3d24dd27c";
  }

  static const char* value(const folding_srvs::GoToGrip&) { return value(); } 
};

template<>
struct DataType<folding_srvs::GoToGrip> {
  static const char* value() 
  {
    return "folding_srvs/GoToGrip";
  }

  static const char* value(const folding_srvs::GoToGrip&) { return value(); } 
};

template<class ContainerAllocator>
struct MD5Sum<folding_srvs::GoToGripRequest_<ContainerAllocator> > {
  static const char* value() 
  {
    return "283b0415f491e6b192fcafd3d24dd27c";
  }

  static const char* value(const folding_srvs::GoToGripRequest_<ContainerAllocator> &) { return value(); } 
};

template<class ContainerAllocator>
struct DataType<folding_srvs::GoToGripRequest_<ContainerAllocator> > {
  static const char* value() 
  {
    return "folding_srvs/GoToGrip";
  }

  static const char* value(const folding_srvs::GoToGripRequest_<ContainerAllocator> &) { return value(); } 
};

template<class ContainerAllocator>
struct MD5Sum<folding_srvs::GoToGripResponse_<ContainerAllocator> > {
  static const char* value() 
  {
    return "283b0415f491e6b192fcafd3d24dd27c";
  }

  static const char* value(const folding_srvs::GoToGripResponse_<ContainerAllocator> &) { return value(); } 
};

template<class ContainerAllocator>
struct DataType<folding_srvs::GoToGripResponse_<ContainerAllocator> > {
  static const char* value() 
  {
    return "folding_srvs/GoToGrip";
  }

  static const char* value(const folding_srvs::GoToGripResponse_<ContainerAllocator> &) { return value(); } 
};

} // namespace service_traits
} // namespace ros

#endif // FOLDING_SRVS_SERVICE_GOTOGRIP_H

