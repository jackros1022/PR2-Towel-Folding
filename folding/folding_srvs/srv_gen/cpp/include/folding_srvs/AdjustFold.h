/* Auto-generated by genmsg_cpp for file /home/karthik/karthik_sandbox/github_repos/folding/folding_srvs/srv/AdjustFold.srv */
#ifndef FOLDING_SRVS_SERVICE_ADJUSTFOLD_H
#define FOLDING_SRVS_SERVICE_ADJUSTFOLD_H
#include <string>
#include <vector>
#include <ostream>
#include "ros/serialization.h"
#include "ros/builtin_message_traits.h"
#include "ros/message_operations.h"
#include "ros/message.h"
#include "ros/time.h"

#include "ros/service_traits.h"

#include "geometry_msgs/PointStamped.h"
#include "geometry_msgs/PointStamped.h"


#include "geometry_msgs/PointStamped.h"
#include "geometry_msgs/PointStamped.h"

namespace folding_srvs
{
template <class ContainerAllocator>
struct AdjustFoldRequest_ : public ros::Message
{
  typedef AdjustFoldRequest_<ContainerAllocator> Type;

  AdjustFoldRequest_()
  : start()
  , end()
  {
  }

  AdjustFoldRequest_(const ContainerAllocator& _alloc)
  : start(_alloc)
  , end(_alloc)
  {
  }

  typedef  ::geometry_msgs::PointStamped_<ContainerAllocator>  _start_type;
   ::geometry_msgs::PointStamped_<ContainerAllocator>  start;

  typedef  ::geometry_msgs::PointStamped_<ContainerAllocator>  _end_type;
   ::geometry_msgs::PointStamped_<ContainerAllocator>  end;


private:
  static const char* __s_getDataType_() { return "folding_srvs/AdjustFoldRequest"; }
public:
  ROS_DEPRECATED static const std::string __s_getDataType() { return __s_getDataType_(); }

  ROS_DEPRECATED const std::string __getDataType() const { return __s_getDataType_(); }

private:
  static const char* __s_getMD5Sum_() { return "2beabb30dac799d89e40ef673fba4ab1"; }
public:
  ROS_DEPRECATED static const std::string __s_getMD5Sum() { return __s_getMD5Sum_(); }

  ROS_DEPRECATED const std::string __getMD5Sum() const { return __s_getMD5Sum_(); }

private:
  static const char* __s_getServerMD5Sum_() { return "6b200e0e09c9fc34fb9a2a20661850b0"; }
public:
  ROS_DEPRECATED static const std::string __s_getServerMD5Sum() { return __s_getServerMD5Sum_(); }

  ROS_DEPRECATED const std::string __getServerMD5Sum() const { return __s_getServerMD5Sum_(); }

private:
  static const char* __s_getMessageDefinition_() { return "geometry_msgs/PointStamped start\n\
geometry_msgs/PointStamped end\n\
\n\
================================================================================\n\
MSG: geometry_msgs/PointStamped\n\
# This represents a Point with reference coordinate frame and timestamp\n\
Header header\n\
Point point\n\
\n\
================================================================================\n\
MSG: std_msgs/Header\n\
# Standard metadata for higher-level stamped data types.\n\
# This is generally used to communicate timestamped data \n\
# in a particular coordinate frame.\n\
# \n\
# sequence ID: consecutively increasing ID \n\
uint32 seq\n\
#Two-integer timestamp that is expressed as:\n\
# * stamp.secs: seconds (stamp_secs) since epoch\n\
# * stamp.nsecs: nanoseconds since stamp_secs\n\
# time-handling sugar is provided by the client library\n\
time stamp\n\
#Frame this data is associated with\n\
# 0: no frame\n\
# 1: global frame\n\
string frame_id\n\
\n\
================================================================================\n\
MSG: geometry_msgs/Point\n\
# This contains the position of a point in free space\n\
float64 x\n\
float64 y\n\
float64 z\n\
\n\
"; }
public:
  ROS_DEPRECATED static const std::string __s_getMessageDefinition() { return __s_getMessageDefinition_(); }

  ROS_DEPRECATED const std::string __getMessageDefinition() const { return __s_getMessageDefinition_(); }

  ROS_DEPRECATED virtual uint8_t *serialize(uint8_t *write_ptr, uint32_t seq) const
  {
    ros::serialization::OStream stream(write_ptr, 1000000000);
    ros::serialization::serialize(stream, start);
    ros::serialization::serialize(stream, end);
    return stream.getData();
  }

  ROS_DEPRECATED virtual uint8_t *deserialize(uint8_t *read_ptr)
  {
    ros::serialization::IStream stream(read_ptr, 1000000000);
    ros::serialization::deserialize(stream, start);
    ros::serialization::deserialize(stream, end);
    return stream.getData();
  }

  ROS_DEPRECATED virtual uint32_t serializationLength() const
  {
    uint32_t size = 0;
    size += ros::serialization::serializationLength(start);
    size += ros::serialization::serializationLength(end);
    return size;
  }

  typedef boost::shared_ptr< ::folding_srvs::AdjustFoldRequest_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::folding_srvs::AdjustFoldRequest_<ContainerAllocator>  const> ConstPtr;
}; // struct AdjustFoldRequest
typedef  ::folding_srvs::AdjustFoldRequest_<std::allocator<void> > AdjustFoldRequest;

typedef boost::shared_ptr< ::folding_srvs::AdjustFoldRequest> AdjustFoldRequestPtr;
typedef boost::shared_ptr< ::folding_srvs::AdjustFoldRequest const> AdjustFoldRequestConstPtr;


template <class ContainerAllocator>
struct AdjustFoldResponse_ : public ros::Message
{
  typedef AdjustFoldResponse_<ContainerAllocator> Type;

  AdjustFoldResponse_()
  : start()
  , end()
  {
  }

  AdjustFoldResponse_(const ContainerAllocator& _alloc)
  : start(_alloc)
  , end(_alloc)
  {
  }

  typedef  ::geometry_msgs::PointStamped_<ContainerAllocator>  _start_type;
   ::geometry_msgs::PointStamped_<ContainerAllocator>  start;

  typedef  ::geometry_msgs::PointStamped_<ContainerAllocator>  _end_type;
   ::geometry_msgs::PointStamped_<ContainerAllocator>  end;


private:
  static const char* __s_getDataType_() { return "folding_srvs/AdjustFoldResponse"; }
public:
  ROS_DEPRECATED static const std::string __s_getDataType() { return __s_getDataType_(); }

  ROS_DEPRECATED const std::string __getDataType() const { return __s_getDataType_(); }

private:
  static const char* __s_getMD5Sum_() { return "2beabb30dac799d89e40ef673fba4ab1"; }
public:
  ROS_DEPRECATED static const std::string __s_getMD5Sum() { return __s_getMD5Sum_(); }

  ROS_DEPRECATED const std::string __getMD5Sum() const { return __s_getMD5Sum_(); }

private:
  static const char* __s_getServerMD5Sum_() { return "6b200e0e09c9fc34fb9a2a20661850b0"; }
public:
  ROS_DEPRECATED static const std::string __s_getServerMD5Sum() { return __s_getServerMD5Sum_(); }

  ROS_DEPRECATED const std::string __getServerMD5Sum() const { return __s_getServerMD5Sum_(); }

private:
  static const char* __s_getMessageDefinition_() { return "geometry_msgs/PointStamped start\n\
geometry_msgs/PointStamped end\n\
\n\
\n\
================================================================================\n\
MSG: geometry_msgs/PointStamped\n\
# This represents a Point with reference coordinate frame and timestamp\n\
Header header\n\
Point point\n\
\n\
================================================================================\n\
MSG: std_msgs/Header\n\
# Standard metadata for higher-level stamped data types.\n\
# This is generally used to communicate timestamped data \n\
# in a particular coordinate frame.\n\
# \n\
# sequence ID: consecutively increasing ID \n\
uint32 seq\n\
#Two-integer timestamp that is expressed as:\n\
# * stamp.secs: seconds (stamp_secs) since epoch\n\
# * stamp.nsecs: nanoseconds since stamp_secs\n\
# time-handling sugar is provided by the client library\n\
time stamp\n\
#Frame this data is associated with\n\
# 0: no frame\n\
# 1: global frame\n\
string frame_id\n\
\n\
================================================================================\n\
MSG: geometry_msgs/Point\n\
# This contains the position of a point in free space\n\
float64 x\n\
float64 y\n\
float64 z\n\
\n\
"; }
public:
  ROS_DEPRECATED static const std::string __s_getMessageDefinition() { return __s_getMessageDefinition_(); }

  ROS_DEPRECATED const std::string __getMessageDefinition() const { return __s_getMessageDefinition_(); }

  ROS_DEPRECATED virtual uint8_t *serialize(uint8_t *write_ptr, uint32_t seq) const
  {
    ros::serialization::OStream stream(write_ptr, 1000000000);
    ros::serialization::serialize(stream, start);
    ros::serialization::serialize(stream, end);
    return stream.getData();
  }

  ROS_DEPRECATED virtual uint8_t *deserialize(uint8_t *read_ptr)
  {
    ros::serialization::IStream stream(read_ptr, 1000000000);
    ros::serialization::deserialize(stream, start);
    ros::serialization::deserialize(stream, end);
    return stream.getData();
  }

  ROS_DEPRECATED virtual uint32_t serializationLength() const
  {
    uint32_t size = 0;
    size += ros::serialization::serializationLength(start);
    size += ros::serialization::serializationLength(end);
    return size;
  }

  typedef boost::shared_ptr< ::folding_srvs::AdjustFoldResponse_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::folding_srvs::AdjustFoldResponse_<ContainerAllocator>  const> ConstPtr;
}; // struct AdjustFoldResponse
typedef  ::folding_srvs::AdjustFoldResponse_<std::allocator<void> > AdjustFoldResponse;

typedef boost::shared_ptr< ::folding_srvs::AdjustFoldResponse> AdjustFoldResponsePtr;
typedef boost::shared_ptr< ::folding_srvs::AdjustFoldResponse const> AdjustFoldResponseConstPtr;

struct AdjustFold
{

typedef AdjustFoldRequest Request;
typedef AdjustFoldResponse Response;
Request request;
Response response;

typedef Request RequestType;
typedef Response ResponseType;
}; // struct AdjustFold
} // namespace folding_srvs

namespace ros
{
namespace message_traits
{
template<class ContainerAllocator>
struct MD5Sum< ::folding_srvs::AdjustFoldRequest_<ContainerAllocator> > {
  static const char* value() 
  {
    return "2beabb30dac799d89e40ef673fba4ab1";
  }

  static const char* value(const  ::folding_srvs::AdjustFoldRequest_<ContainerAllocator> &) { return value(); } 
  static const uint64_t static_value1 = 0x2beabb30dac799d8ULL;
  static const uint64_t static_value2 = 0x9e40ef673fba4ab1ULL;
};

template<class ContainerAllocator>
struct DataType< ::folding_srvs::AdjustFoldRequest_<ContainerAllocator> > {
  static const char* value() 
  {
    return "folding_srvs/AdjustFoldRequest";
  }

  static const char* value(const  ::folding_srvs::AdjustFoldRequest_<ContainerAllocator> &) { return value(); } 
};

template<class ContainerAllocator>
struct Definition< ::folding_srvs::AdjustFoldRequest_<ContainerAllocator> > {
  static const char* value() 
  {
    return "geometry_msgs/PointStamped start\n\
geometry_msgs/PointStamped end\n\
\n\
================================================================================\n\
MSG: geometry_msgs/PointStamped\n\
# This represents a Point with reference coordinate frame and timestamp\n\
Header header\n\
Point point\n\
\n\
================================================================================\n\
MSG: std_msgs/Header\n\
# Standard metadata for higher-level stamped data types.\n\
# This is generally used to communicate timestamped data \n\
# in a particular coordinate frame.\n\
# \n\
# sequence ID: consecutively increasing ID \n\
uint32 seq\n\
#Two-integer timestamp that is expressed as:\n\
# * stamp.secs: seconds (stamp_secs) since epoch\n\
# * stamp.nsecs: nanoseconds since stamp_secs\n\
# time-handling sugar is provided by the client library\n\
time stamp\n\
#Frame this data is associated with\n\
# 0: no frame\n\
# 1: global frame\n\
string frame_id\n\
\n\
================================================================================\n\
MSG: geometry_msgs/Point\n\
# This contains the position of a point in free space\n\
float64 x\n\
float64 y\n\
float64 z\n\
\n\
";
  }

  static const char* value(const  ::folding_srvs::AdjustFoldRequest_<ContainerAllocator> &) { return value(); } 
};

} // namespace message_traits
} // namespace ros


namespace ros
{
namespace message_traits
{
template<class ContainerAllocator>
struct MD5Sum< ::folding_srvs::AdjustFoldResponse_<ContainerAllocator> > {
  static const char* value() 
  {
    return "2beabb30dac799d89e40ef673fba4ab1";
  }

  static const char* value(const  ::folding_srvs::AdjustFoldResponse_<ContainerAllocator> &) { return value(); } 
  static const uint64_t static_value1 = 0x2beabb30dac799d8ULL;
  static const uint64_t static_value2 = 0x9e40ef673fba4ab1ULL;
};

template<class ContainerAllocator>
struct DataType< ::folding_srvs::AdjustFoldResponse_<ContainerAllocator> > {
  static const char* value() 
  {
    return "folding_srvs/AdjustFoldResponse";
  }

  static const char* value(const  ::folding_srvs::AdjustFoldResponse_<ContainerAllocator> &) { return value(); } 
};

template<class ContainerAllocator>
struct Definition< ::folding_srvs::AdjustFoldResponse_<ContainerAllocator> > {
  static const char* value() 
  {
    return "geometry_msgs/PointStamped start\n\
geometry_msgs/PointStamped end\n\
\n\
\n\
================================================================================\n\
MSG: geometry_msgs/PointStamped\n\
# This represents a Point with reference coordinate frame and timestamp\n\
Header header\n\
Point point\n\
\n\
================================================================================\n\
MSG: std_msgs/Header\n\
# Standard metadata for higher-level stamped data types.\n\
# This is generally used to communicate timestamped data \n\
# in a particular coordinate frame.\n\
# \n\
# sequence ID: consecutively increasing ID \n\
uint32 seq\n\
#Two-integer timestamp that is expressed as:\n\
# * stamp.secs: seconds (stamp_secs) since epoch\n\
# * stamp.nsecs: nanoseconds since stamp_secs\n\
# time-handling sugar is provided by the client library\n\
time stamp\n\
#Frame this data is associated with\n\
# 0: no frame\n\
# 1: global frame\n\
string frame_id\n\
\n\
================================================================================\n\
MSG: geometry_msgs/Point\n\
# This contains the position of a point in free space\n\
float64 x\n\
float64 y\n\
float64 z\n\
\n\
";
  }

  static const char* value(const  ::folding_srvs::AdjustFoldResponse_<ContainerAllocator> &) { return value(); } 
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

template<class ContainerAllocator> struct Serializer< ::folding_srvs::AdjustFoldRequest_<ContainerAllocator> >
{
  template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
  {
    stream.next(m.start);
    stream.next(m.end);
  }

  ROS_DECLARE_ALLINONE_SERIALIZER;
}; // struct AdjustFoldRequest_
} // namespace serialization
} // namespace ros


namespace ros
{
namespace serialization
{

template<class ContainerAllocator> struct Serializer< ::folding_srvs::AdjustFoldResponse_<ContainerAllocator> >
{
  template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
  {
    stream.next(m.start);
    stream.next(m.end);
  }

  ROS_DECLARE_ALLINONE_SERIALIZER;
}; // struct AdjustFoldResponse_
} // namespace serialization
} // namespace ros

namespace ros
{
namespace service_traits
{
template<>
struct MD5Sum<folding_srvs::AdjustFold> {
  static const char* value() 
  {
    return "6b200e0e09c9fc34fb9a2a20661850b0";
  }

  static const char* value(const folding_srvs::AdjustFold&) { return value(); } 
};

template<>
struct DataType<folding_srvs::AdjustFold> {
  static const char* value() 
  {
    return "folding_srvs/AdjustFold";
  }

  static const char* value(const folding_srvs::AdjustFold&) { return value(); } 
};

template<class ContainerAllocator>
struct MD5Sum<folding_srvs::AdjustFoldRequest_<ContainerAllocator> > {
  static const char* value() 
  {
    return "6b200e0e09c9fc34fb9a2a20661850b0";
  }

  static const char* value(const folding_srvs::AdjustFoldRequest_<ContainerAllocator> &) { return value(); } 
};

template<class ContainerAllocator>
struct DataType<folding_srvs::AdjustFoldRequest_<ContainerAllocator> > {
  static const char* value() 
  {
    return "folding_srvs/AdjustFold";
  }

  static const char* value(const folding_srvs::AdjustFoldRequest_<ContainerAllocator> &) { return value(); } 
};

template<class ContainerAllocator>
struct MD5Sum<folding_srvs::AdjustFoldResponse_<ContainerAllocator> > {
  static const char* value() 
  {
    return "6b200e0e09c9fc34fb9a2a20661850b0";
  }

  static const char* value(const folding_srvs::AdjustFoldResponse_<ContainerAllocator> &) { return value(); } 
};

template<class ContainerAllocator>
struct DataType<folding_srvs::AdjustFoldResponse_<ContainerAllocator> > {
  static const char* value() 
  {
    return "folding_srvs/AdjustFold";
  }

  static const char* value(const folding_srvs::AdjustFoldResponse_<ContainerAllocator> &) { return value(); } 
};

} // namespace service_traits
} // namespace ros

#endif // FOLDING_SRVS_SERVICE_ADJUSTFOLD_H

