/* Auto-generated by genmsg_cpp for file /home/karthik/karthik_sandbox/github_repos/folding/folding_srvs/srv/GetTable.srv */
#ifndef FOLDING_SRVS_SERVICE_GETTABLE_H
#define FOLDING_SRVS_SERVICE_GETTABLE_H
#include <string>
#include <vector>
#include <ostream>
#include "ros/serialization.h"
#include "ros/builtin_message_traits.h"
#include "ros/message_operations.h"
#include "ros/message.h"
#include "ros/time.h"

#include "ros/service_traits.h"



#include "geometric_shapes_msgs/Shape.h"
#include "geometry_msgs/PoseStamped.h"

namespace folding_srvs
{
template <class ContainerAllocator>
struct GetTableRequest_ : public ros::Message
{
  typedef GetTableRequest_<ContainerAllocator> Type;

  GetTableRequest_()
  {
  }

  GetTableRequest_(const ContainerAllocator& _alloc)
  {
  }


private:
  static const char* __s_getDataType_() { return "folding_srvs/GetTableRequest"; }
public:
  ROS_DEPRECATED static const std::string __s_getDataType() { return __s_getDataType_(); }

  ROS_DEPRECATED const std::string __getDataType() const { return __s_getDataType_(); }

private:
  static const char* __s_getMD5Sum_() { return "d41d8cd98f00b204e9800998ecf8427e"; }
public:
  ROS_DEPRECATED static const std::string __s_getMD5Sum() { return __s_getMD5Sum_(); }

  ROS_DEPRECATED const std::string __getMD5Sum() const { return __s_getMD5Sum_(); }

private:
  static const char* __s_getServerMD5Sum_() { return "79c0eb4705f19651b0b57a66d8c9a156"; }
public:
  ROS_DEPRECATED static const std::string __s_getServerMD5Sum() { return __s_getServerMD5Sum_(); }

  ROS_DEPRECATED const std::string __getServerMD5Sum() const { return __s_getServerMD5Sum_(); }

private:
  static const char* __s_getMessageDefinition_() { return "\n\
"; }
public:
  ROS_DEPRECATED static const std::string __s_getMessageDefinition() { return __s_getMessageDefinition_(); }

  ROS_DEPRECATED const std::string __getMessageDefinition() const { return __s_getMessageDefinition_(); }

  ROS_DEPRECATED virtual uint8_t *serialize(uint8_t *write_ptr, uint32_t seq) const
  {
    ros::serialization::OStream stream(write_ptr, 1000000000);
    return stream.getData();
  }

  ROS_DEPRECATED virtual uint8_t *deserialize(uint8_t *read_ptr)
  {
    ros::serialization::IStream stream(read_ptr, 1000000000);
    return stream.getData();
  }

  ROS_DEPRECATED virtual uint32_t serializationLength() const
  {
    uint32_t size = 0;
    return size;
  }

  typedef boost::shared_ptr< ::folding_srvs::GetTableRequest_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::folding_srvs::GetTableRequest_<ContainerAllocator>  const> ConstPtr;
}; // struct GetTableRequest
typedef  ::folding_srvs::GetTableRequest_<std::allocator<void> > GetTableRequest;

typedef boost::shared_ptr< ::folding_srvs::GetTableRequest> GetTableRequestPtr;
typedef boost::shared_ptr< ::folding_srvs::GetTableRequest const> GetTableRequestConstPtr;


template <class ContainerAllocator>
struct GetTableResponse_ : public ros::Message
{
  typedef GetTableResponse_<ContainerAllocator> Type;

  GetTableResponse_()
  : shape()
  , pose_stamped()
  {
  }

  GetTableResponse_(const ContainerAllocator& _alloc)
  : shape(_alloc)
  , pose_stamped(_alloc)
  {
  }

  typedef  ::geometric_shapes_msgs::Shape_<ContainerAllocator>  _shape_type;
   ::geometric_shapes_msgs::Shape_<ContainerAllocator>  shape;

  typedef  ::geometry_msgs::PoseStamped_<ContainerAllocator>  _pose_stamped_type;
   ::geometry_msgs::PoseStamped_<ContainerAllocator>  pose_stamped;


private:
  static const char* __s_getDataType_() { return "folding_srvs/GetTableResponse"; }
public:
  ROS_DEPRECATED static const std::string __s_getDataType() { return __s_getDataType_(); }

  ROS_DEPRECATED const std::string __getDataType() const { return __s_getDataType_(); }

private:
  static const char* __s_getMD5Sum_() { return "79c0eb4705f19651b0b57a66d8c9a156"; }
public:
  ROS_DEPRECATED static const std::string __s_getMD5Sum() { return __s_getMD5Sum_(); }

  ROS_DEPRECATED const std::string __getMD5Sum() const { return __s_getMD5Sum_(); }

private:
  static const char* __s_getServerMD5Sum_() { return "79c0eb4705f19651b0b57a66d8c9a156"; }
public:
  ROS_DEPRECATED static const std::string __s_getServerMD5Sum() { return __s_getServerMD5Sum_(); }

  ROS_DEPRECATED const std::string __getServerMD5Sum() const { return __s_getServerMD5Sum_(); }

private:
  static const char* __s_getMessageDefinition_() { return "geometric_shapes_msgs/Shape shape\n\
geometry_msgs/PoseStamped pose_stamped\n\
\n\
\n\
================================================================================\n\
MSG: geometric_shapes_msgs/Shape\n\
byte SPHERE=0\n\
byte BOX=1\n\
byte CYLINDER=2\n\
byte MESH=3\n\
\n\
byte type\n\
\n\
\n\
#### define sphere, box, cylinder ####\n\
# the origin of each shape is considered at the shape's center\n\
\n\
# for sphere\n\
# radius := dimensions[0]\n\
\n\
# for cylinder\n\
# radius := dimensions[0]\n\
# length := dimensions[1]\n\
# the length is along the Z axis\n\
\n\
# for box\n\
# size_x := dimensions[0]\n\
# size_y := dimensions[1]\n\
# size_z := dimensions[2]\n\
float64[] dimensions\n\
\n\
\n\
#### define mesh ####\n\
\n\
# list of triangles; triangle k is defined by tre vertices located\n\
# at indices triangles[3k], triangles[3k+1], triangles[3k+2]\n\
int32[] triangles\n\
geometry_msgs/Point[] vertices\n\
\n\
================================================================================\n\
MSG: geometry_msgs/Point\n\
# This contains the position of a point in free space\n\
float64 x\n\
float64 y\n\
float64 z\n\
\n\
================================================================================\n\
MSG: geometry_msgs/PoseStamped\n\
# A Pose with reference coordinate frame and timestamp\n\
Header header\n\
Pose pose\n\
\n\
================================================================================\n\
MSG: std_msgs/Header\n\
# Standard metadata for higher-level stamped data types.\n\
# This is generally used to communicate timestamped data \n\
# in a particular coordinate frame.\n\
# \n\
# sequence ID: consecutively increasing ID \n\
uint32 seq\n\
#Two-integer timestamp that is expressed as:\n\
# * stamp.secs: seconds (stamp_secs) since epoch\n\
# * stamp.nsecs: nanoseconds since stamp_secs\n\
# time-handling sugar is provided by the client library\n\
time stamp\n\
#Frame this data is associated with\n\
# 0: no frame\n\
# 1: global frame\n\
string frame_id\n\
\n\
================================================================================\n\
MSG: geometry_msgs/Pose\n\
# A representation of pose in free space, composed of postion and orientation. \n\
Point position\n\
Quaternion orientation\n\
\n\
================================================================================\n\
MSG: geometry_msgs/Quaternion\n\
# This represents an orientation in free space in quaternion form.\n\
\n\
float64 x\n\
float64 y\n\
float64 z\n\
float64 w\n\
\n\
"; }
public:
  ROS_DEPRECATED static const std::string __s_getMessageDefinition() { return __s_getMessageDefinition_(); }

  ROS_DEPRECATED const std::string __getMessageDefinition() const { return __s_getMessageDefinition_(); }

  ROS_DEPRECATED virtual uint8_t *serialize(uint8_t *write_ptr, uint32_t seq) const
  {
    ros::serialization::OStream stream(write_ptr, 1000000000);
    ros::serialization::serialize(stream, shape);
    ros::serialization::serialize(stream, pose_stamped);
    return stream.getData();
  }

  ROS_DEPRECATED virtual uint8_t *deserialize(uint8_t *read_ptr)
  {
    ros::serialization::IStream stream(read_ptr, 1000000000);
    ros::serialization::deserialize(stream, shape);
    ros::serialization::deserialize(stream, pose_stamped);
    return stream.getData();
  }

  ROS_DEPRECATED virtual uint32_t serializationLength() const
  {
    uint32_t size = 0;
    size += ros::serialization::serializationLength(shape);
    size += ros::serialization::serializationLength(pose_stamped);
    return size;
  }

  typedef boost::shared_ptr< ::folding_srvs::GetTableResponse_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::folding_srvs::GetTableResponse_<ContainerAllocator>  const> ConstPtr;
}; // struct GetTableResponse
typedef  ::folding_srvs::GetTableResponse_<std::allocator<void> > GetTableResponse;

typedef boost::shared_ptr< ::folding_srvs::GetTableResponse> GetTableResponsePtr;
typedef boost::shared_ptr< ::folding_srvs::GetTableResponse const> GetTableResponseConstPtr;

struct GetTable
{

typedef GetTableRequest Request;
typedef GetTableResponse Response;
Request request;
Response response;

typedef Request RequestType;
typedef Response ResponseType;
}; // struct GetTable
} // namespace folding_srvs

namespace ros
{
namespace message_traits
{
template<class ContainerAllocator>
struct MD5Sum< ::folding_srvs::GetTableRequest_<ContainerAllocator> > {
  static const char* value() 
  {
    return "d41d8cd98f00b204e9800998ecf8427e";
  }

  static const char* value(const  ::folding_srvs::GetTableRequest_<ContainerAllocator> &) { return value(); } 
  static const uint64_t static_value1 = 0xd41d8cd98f00b204ULL;
  static const uint64_t static_value2 = 0xe9800998ecf8427eULL;
};

template<class ContainerAllocator>
struct DataType< ::folding_srvs::GetTableRequest_<ContainerAllocator> > {
  static const char* value() 
  {
    return "folding_srvs/GetTableRequest";
  }

  static const char* value(const  ::folding_srvs::GetTableRequest_<ContainerAllocator> &) { return value(); } 
};

template<class ContainerAllocator>
struct Definition< ::folding_srvs::GetTableRequest_<ContainerAllocator> > {
  static const char* value() 
  {
    return "\n\
";
  }

  static const char* value(const  ::folding_srvs::GetTableRequest_<ContainerAllocator> &) { return value(); } 
};

template<class ContainerAllocator> struct IsFixedSize< ::folding_srvs::GetTableRequest_<ContainerAllocator> > : public TrueType {};
} // namespace message_traits
} // namespace ros


namespace ros
{
namespace message_traits
{
template<class ContainerAllocator>
struct MD5Sum< ::folding_srvs::GetTableResponse_<ContainerAllocator> > {
  static const char* value() 
  {
    return "79c0eb4705f19651b0b57a66d8c9a156";
  }

  static const char* value(const  ::folding_srvs::GetTableResponse_<ContainerAllocator> &) { return value(); } 
  static const uint64_t static_value1 = 0x79c0eb4705f19651ULL;
  static const uint64_t static_value2 = 0xb0b57a66d8c9a156ULL;
};

template<class ContainerAllocator>
struct DataType< ::folding_srvs::GetTableResponse_<ContainerAllocator> > {
  static const char* value() 
  {
    return "folding_srvs/GetTableResponse";
  }

  static const char* value(const  ::folding_srvs::GetTableResponse_<ContainerAllocator> &) { return value(); } 
};

template<class ContainerAllocator>
struct Definition< ::folding_srvs::GetTableResponse_<ContainerAllocator> > {
  static const char* value() 
  {
    return "geometric_shapes_msgs/Shape shape\n\
geometry_msgs/PoseStamped pose_stamped\n\
\n\
\n\
================================================================================\n\
MSG: geometric_shapes_msgs/Shape\n\
byte SPHERE=0\n\
byte BOX=1\n\
byte CYLINDER=2\n\
byte MESH=3\n\
\n\
byte type\n\
\n\
\n\
#### define sphere, box, cylinder ####\n\
# the origin of each shape is considered at the shape's center\n\
\n\
# for sphere\n\
# radius := dimensions[0]\n\
\n\
# for cylinder\n\
# radius := dimensions[0]\n\
# length := dimensions[1]\n\
# the length is along the Z axis\n\
\n\
# for box\n\
# size_x := dimensions[0]\n\
# size_y := dimensions[1]\n\
# size_z := dimensions[2]\n\
float64[] dimensions\n\
\n\
\n\
#### define mesh ####\n\
\n\
# list of triangles; triangle k is defined by tre vertices located\n\
# at indices triangles[3k], triangles[3k+1], triangles[3k+2]\n\
int32[] triangles\n\
geometry_msgs/Point[] vertices\n\
\n\
================================================================================\n\
MSG: geometry_msgs/Point\n\
# This contains the position of a point in free space\n\
float64 x\n\
float64 y\n\
float64 z\n\
\n\
================================================================================\n\
MSG: geometry_msgs/PoseStamped\n\
# A Pose with reference coordinate frame and timestamp\n\
Header header\n\
Pose pose\n\
\n\
================================================================================\n\
MSG: std_msgs/Header\n\
# Standard metadata for higher-level stamped data types.\n\
# This is generally used to communicate timestamped data \n\
# in a particular coordinate frame.\n\
# \n\
# sequence ID: consecutively increasing ID \n\
uint32 seq\n\
#Two-integer timestamp that is expressed as:\n\
# * stamp.secs: seconds (stamp_secs) since epoch\n\
# * stamp.nsecs: nanoseconds since stamp_secs\n\
# time-handling sugar is provided by the client library\n\
time stamp\n\
#Frame this data is associated with\n\
# 0: no frame\n\
# 1: global frame\n\
string frame_id\n\
\n\
================================================================================\n\
MSG: geometry_msgs/Pose\n\
# A representation of pose in free space, composed of postion and orientation. \n\
Point position\n\
Quaternion orientation\n\
\n\
================================================================================\n\
MSG: geometry_msgs/Quaternion\n\
# This represents an orientation in free space in quaternion form.\n\
\n\
float64 x\n\
float64 y\n\
float64 z\n\
float64 w\n\
\n\
";
  }

  static const char* value(const  ::folding_srvs::GetTableResponse_<ContainerAllocator> &) { return value(); } 
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

template<class ContainerAllocator> struct Serializer< ::folding_srvs::GetTableRequest_<ContainerAllocator> >
{
  template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
  {
  }

  ROS_DECLARE_ALLINONE_SERIALIZER;
}; // struct GetTableRequest_
} // namespace serialization
} // namespace ros


namespace ros
{
namespace serialization
{

template<class ContainerAllocator> struct Serializer< ::folding_srvs::GetTableResponse_<ContainerAllocator> >
{
  template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
  {
    stream.next(m.shape);
    stream.next(m.pose_stamped);
  }

  ROS_DECLARE_ALLINONE_SERIALIZER;
}; // struct GetTableResponse_
} // namespace serialization
} // namespace ros

namespace ros
{
namespace service_traits
{
template<>
struct MD5Sum<folding_srvs::GetTable> {
  static const char* value() 
  {
    return "79c0eb4705f19651b0b57a66d8c9a156";
  }

  static const char* value(const folding_srvs::GetTable&) { return value(); } 
};

template<>
struct DataType<folding_srvs::GetTable> {
  static const char* value() 
  {
    return "folding_srvs/GetTable";
  }

  static const char* value(const folding_srvs::GetTable&) { return value(); } 
};

template<class ContainerAllocator>
struct MD5Sum<folding_srvs::GetTableRequest_<ContainerAllocator> > {
  static const char* value() 
  {
    return "79c0eb4705f19651b0b57a66d8c9a156";
  }

  static const char* value(const folding_srvs::GetTableRequest_<ContainerAllocator> &) { return value(); } 
};

template<class ContainerAllocator>
struct DataType<folding_srvs::GetTableRequest_<ContainerAllocator> > {
  static const char* value() 
  {
    return "folding_srvs/GetTable";
  }

  static const char* value(const folding_srvs::GetTableRequest_<ContainerAllocator> &) { return value(); } 
};

template<class ContainerAllocator>
struct MD5Sum<folding_srvs::GetTableResponse_<ContainerAllocator> > {
  static const char* value() 
  {
    return "79c0eb4705f19651b0b57a66d8c9a156";
  }

  static const char* value(const folding_srvs::GetTableResponse_<ContainerAllocator> &) { return value(); } 
};

template<class ContainerAllocator>
struct DataType<folding_srvs::GetTableResponse_<ContainerAllocator> > {
  static const char* value() 
  {
    return "folding_srvs/GetTable";
  }

  static const char* value(const folding_srvs::GetTableResponse_<ContainerAllocator> &) { return value(); } 
};

} // namespace service_traits
} // namespace ros

#endif // FOLDING_SRVS_SERVICE_GETTABLE_H

