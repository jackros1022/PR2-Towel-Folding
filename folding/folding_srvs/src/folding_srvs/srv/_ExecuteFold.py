"""autogenerated by genmsg_py from ExecuteFoldRequest.msg. Do not edit."""
import roslib.message
import struct

import geometry_msgs.msg
import folding_msgs.msg
import std_msgs.msg

class ExecuteFoldRequest(roslib.message.Message):
  _md5sum = "c35cb545a0cdcce64a14e6890fd63118"
  _type = "folding_srvs/ExecuteFoldRequest"
  _has_header = False #flag to mark the presence of a Header object
  _full_text = """folding_msgs/FoldTraj fold_traj

================================================================================
MSG: folding_msgs/FoldTraj
geometry_msgs/PointStamped[] approach_points
geometry_msgs/PointStamped[] grip_points
geometry_msgs/PointStamped[] quarter_points
geometry_msgs/PointStamped[] weight_points
geometry_msgs/PointStamped[] vertical_points
geometry_msgs/PointStamped[] goal_points
geometry_msgs/PointStamped smooth_center
geometry_msgs/PointStamped[] smooth_edges
bool ignore_smooth
float64[] tilts
bool red

================================================================================
MSG: geometry_msgs/PointStamped
# This represents a Point with reference coordinate frame and timestamp
Header header
Point point

================================================================================
MSG: std_msgs/Header
# Standard metadata for higher-level stamped data types.
# This is generally used to communicate timestamped data 
# in a particular coordinate frame.
# 
# sequence ID: consecutively increasing ID 
uint32 seq
#Two-integer timestamp that is expressed as:
# * stamp.secs: seconds (stamp_secs) since epoch
# * stamp.nsecs: nanoseconds since stamp_secs
# time-handling sugar is provided by the client library
time stamp
#Frame this data is associated with
# 0: no frame
# 1: global frame
string frame_id

================================================================================
MSG: geometry_msgs/Point
# This contains the position of a point in free space
float64 x
float64 y
float64 z

"""
  __slots__ = ['fold_traj']
  _slot_types = ['folding_msgs/FoldTraj']

  def __init__(self, *args, **kwds):
    """
    Constructor. Any message fields that are implicitly/explicitly
    set to None will be assigned a default value. The recommend
    use is keyword arguments as this is more robust to future message
    changes.  You cannot mix in-order arguments and keyword arguments.
    
    The available fields are:
       fold_traj
    
    @param args: complete set of field values, in .msg order
    @param kwds: use keyword arguments corresponding to message field names
    to set specific fields. 
    """
    if args or kwds:
      super(ExecuteFoldRequest, self).__init__(*args, **kwds)
      #message fields cannot be None, assign default values for those that are
      if self.fold_traj is None:
        self.fold_traj = folding_msgs.msg.FoldTraj()
    else:
      self.fold_traj = folding_msgs.msg.FoldTraj()

  def _get_types(self):
    """
    internal API method
    """
    return self._slot_types

  def serialize(self, buff):
    """
    serialize message into buffer
    @param buff: buffer
    @type  buff: StringIO
    """
    try:
      length = len(self.fold_traj.approach_points)
      buff.write(_struct_I.pack(length))
      for val1 in self.fold_traj.approach_points:
        _v1 = val1.header
        buff.write(_struct_I.pack(_v1.seq))
        _v2 = _v1.stamp
        _x = _v2
        buff.write(_struct_2I.pack(_x.secs, _x.nsecs))
        _x = _v1.frame_id
        length = len(_x)
        buff.write(struct.pack('<I%ss'%length, length, _x))
        _v3 = val1.point
        _x = _v3
        buff.write(_struct_3d.pack(_x.x, _x.y, _x.z))
      length = len(self.fold_traj.grip_points)
      buff.write(_struct_I.pack(length))
      for val1 in self.fold_traj.grip_points:
        _v4 = val1.header
        buff.write(_struct_I.pack(_v4.seq))
        _v5 = _v4.stamp
        _x = _v5
        buff.write(_struct_2I.pack(_x.secs, _x.nsecs))
        _x = _v4.frame_id
        length = len(_x)
        buff.write(struct.pack('<I%ss'%length, length, _x))
        _v6 = val1.point
        _x = _v6
        buff.write(_struct_3d.pack(_x.x, _x.y, _x.z))
      length = len(self.fold_traj.quarter_points)
      buff.write(_struct_I.pack(length))
      for val1 in self.fold_traj.quarter_points:
        _v7 = val1.header
        buff.write(_struct_I.pack(_v7.seq))
        _v8 = _v7.stamp
        _x = _v8
        buff.write(_struct_2I.pack(_x.secs, _x.nsecs))
        _x = _v7.frame_id
        length = len(_x)
        buff.write(struct.pack('<I%ss'%length, length, _x))
        _v9 = val1.point
        _x = _v9
        buff.write(_struct_3d.pack(_x.x, _x.y, _x.z))
      length = len(self.fold_traj.weight_points)
      buff.write(_struct_I.pack(length))
      for val1 in self.fold_traj.weight_points:
        _v10 = val1.header
        buff.write(_struct_I.pack(_v10.seq))
        _v11 = _v10.stamp
        _x = _v11
        buff.write(_struct_2I.pack(_x.secs, _x.nsecs))
        _x = _v10.frame_id
        length = len(_x)
        buff.write(struct.pack('<I%ss'%length, length, _x))
        _v12 = val1.point
        _x = _v12
        buff.write(_struct_3d.pack(_x.x, _x.y, _x.z))
      length = len(self.fold_traj.vertical_points)
      buff.write(_struct_I.pack(length))
      for val1 in self.fold_traj.vertical_points:
        _v13 = val1.header
        buff.write(_struct_I.pack(_v13.seq))
        _v14 = _v13.stamp
        _x = _v14
        buff.write(_struct_2I.pack(_x.secs, _x.nsecs))
        _x = _v13.frame_id
        length = len(_x)
        buff.write(struct.pack('<I%ss'%length, length, _x))
        _v15 = val1.point
        _x = _v15
        buff.write(_struct_3d.pack(_x.x, _x.y, _x.z))
      length = len(self.fold_traj.goal_points)
      buff.write(_struct_I.pack(length))
      for val1 in self.fold_traj.goal_points:
        _v16 = val1.header
        buff.write(_struct_I.pack(_v16.seq))
        _v17 = _v16.stamp
        _x = _v17
        buff.write(_struct_2I.pack(_x.secs, _x.nsecs))
        _x = _v16.frame_id
        length = len(_x)
        buff.write(struct.pack('<I%ss'%length, length, _x))
        _v18 = val1.point
        _x = _v18
        buff.write(_struct_3d.pack(_x.x, _x.y, _x.z))
      _x = self
      buff.write(_struct_3I.pack(_x.fold_traj.smooth_center.header.seq, _x.fold_traj.smooth_center.header.stamp.secs, _x.fold_traj.smooth_center.header.stamp.nsecs))
      _x = self.fold_traj.smooth_center.header.frame_id
      length = len(_x)
      buff.write(struct.pack('<I%ss'%length, length, _x))
      _x = self
      buff.write(_struct_3d.pack(_x.fold_traj.smooth_center.point.x, _x.fold_traj.smooth_center.point.y, _x.fold_traj.smooth_center.point.z))
      length = len(self.fold_traj.smooth_edges)
      buff.write(_struct_I.pack(length))
      for val1 in self.fold_traj.smooth_edges:
        _v19 = val1.header
        buff.write(_struct_I.pack(_v19.seq))
        _v20 = _v19.stamp
        _x = _v20
        buff.write(_struct_2I.pack(_x.secs, _x.nsecs))
        _x = _v19.frame_id
        length = len(_x)
        buff.write(struct.pack('<I%ss'%length, length, _x))
        _v21 = val1.point
        _x = _v21
        buff.write(_struct_3d.pack(_x.x, _x.y, _x.z))
      buff.write(_struct_B.pack(self.fold_traj.ignore_smooth))
      length = len(self.fold_traj.tilts)
      buff.write(_struct_I.pack(length))
      pattern = '<%sd'%length
      buff.write(struct.pack(pattern, *self.fold_traj.tilts))
      buff.write(_struct_B.pack(self.fold_traj.red))
    except struct.error, se: self._check_types(se)
    except TypeError, te: self._check_types(te)

  def deserialize(self, str):
    """
    unpack serialized message in str into this message instance
    @param str: byte array of serialized message
    @type  str: str
    """
    try:
      if self.fold_traj is None:
        self.fold_traj = folding_msgs.msg.FoldTraj()
      end = 0
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      self.fold_traj.approach_points = []
      for i in xrange(0, length):
        val1 = geometry_msgs.msg.PointStamped()
        _v22 = val1.header
        start = end
        end += 4
        (_v22.seq,) = _struct_I.unpack(str[start:end])
        _v23 = _v22.stamp
        _x = _v23
        start = end
        end += 8
        (_x.secs, _x.nsecs,) = _struct_2I.unpack(str[start:end])
        start = end
        end += 4
        (length,) = _struct_I.unpack(str[start:end])
        start = end
        end += length
        _v22.frame_id = str[start:end]
        _v24 = val1.point
        _x = _v24
        start = end
        end += 24
        (_x.x, _x.y, _x.z,) = _struct_3d.unpack(str[start:end])
        self.fold_traj.approach_points.append(val1)
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      self.fold_traj.grip_points = []
      for i in xrange(0, length):
        val1 = geometry_msgs.msg.PointStamped()
        _v25 = val1.header
        start = end
        end += 4
        (_v25.seq,) = _struct_I.unpack(str[start:end])
        _v26 = _v25.stamp
        _x = _v26
        start = end
        end += 8
        (_x.secs, _x.nsecs,) = _struct_2I.unpack(str[start:end])
        start = end
        end += 4
        (length,) = _struct_I.unpack(str[start:end])
        start = end
        end += length
        _v25.frame_id = str[start:end]
        _v27 = val1.point
        _x = _v27
        start = end
        end += 24
        (_x.x, _x.y, _x.z,) = _struct_3d.unpack(str[start:end])
        self.fold_traj.grip_points.append(val1)
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      self.fold_traj.quarter_points = []
      for i in xrange(0, length):
        val1 = geometry_msgs.msg.PointStamped()
        _v28 = val1.header
        start = end
        end += 4
        (_v28.seq,) = _struct_I.unpack(str[start:end])
        _v29 = _v28.stamp
        _x = _v29
        start = end
        end += 8
        (_x.secs, _x.nsecs,) = _struct_2I.unpack(str[start:end])
        start = end
        end += 4
        (length,) = _struct_I.unpack(str[start:end])
        start = end
        end += length
        _v28.frame_id = str[start:end]
        _v30 = val1.point
        _x = _v30
        start = end
        end += 24
        (_x.x, _x.y, _x.z,) = _struct_3d.unpack(str[start:end])
        self.fold_traj.quarter_points.append(val1)
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      self.fold_traj.weight_points = []
      for i in xrange(0, length):
        val1 = geometry_msgs.msg.PointStamped()
        _v31 = val1.header
        start = end
        end += 4
        (_v31.seq,) = _struct_I.unpack(str[start:end])
        _v32 = _v31.stamp
        _x = _v32
        start = end
        end += 8
        (_x.secs, _x.nsecs,) = _struct_2I.unpack(str[start:end])
        start = end
        end += 4
        (length,) = _struct_I.unpack(str[start:end])
        start = end
        end += length
        _v31.frame_id = str[start:end]
        _v33 = val1.point
        _x = _v33
        start = end
        end += 24
        (_x.x, _x.y, _x.z,) = _struct_3d.unpack(str[start:end])
        self.fold_traj.weight_points.append(val1)
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      self.fold_traj.vertical_points = []
      for i in xrange(0, length):
        val1 = geometry_msgs.msg.PointStamped()
        _v34 = val1.header
        start = end
        end += 4
        (_v34.seq,) = _struct_I.unpack(str[start:end])
        _v35 = _v34.stamp
        _x = _v35
        start = end
        end += 8
        (_x.secs, _x.nsecs,) = _struct_2I.unpack(str[start:end])
        start = end
        end += 4
        (length,) = _struct_I.unpack(str[start:end])
        start = end
        end += length
        _v34.frame_id = str[start:end]
        _v36 = val1.point
        _x = _v36
        start = end
        end += 24
        (_x.x, _x.y, _x.z,) = _struct_3d.unpack(str[start:end])
        self.fold_traj.vertical_points.append(val1)
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      self.fold_traj.goal_points = []
      for i in xrange(0, length):
        val1 = geometry_msgs.msg.PointStamped()
        _v37 = val1.header
        start = end
        end += 4
        (_v37.seq,) = _struct_I.unpack(str[start:end])
        _v38 = _v37.stamp
        _x = _v38
        start = end
        end += 8
        (_x.secs, _x.nsecs,) = _struct_2I.unpack(str[start:end])
        start = end
        end += 4
        (length,) = _struct_I.unpack(str[start:end])
        start = end
        end += length
        _v37.frame_id = str[start:end]
        _v39 = val1.point
        _x = _v39
        start = end
        end += 24
        (_x.x, _x.y, _x.z,) = _struct_3d.unpack(str[start:end])
        self.fold_traj.goal_points.append(val1)
      _x = self
      start = end
      end += 12
      (_x.fold_traj.smooth_center.header.seq, _x.fold_traj.smooth_center.header.stamp.secs, _x.fold_traj.smooth_center.header.stamp.nsecs,) = _struct_3I.unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      self.fold_traj.smooth_center.header.frame_id = str[start:end]
      _x = self
      start = end
      end += 24
      (_x.fold_traj.smooth_center.point.x, _x.fold_traj.smooth_center.point.y, _x.fold_traj.smooth_center.point.z,) = _struct_3d.unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      self.fold_traj.smooth_edges = []
      for i in xrange(0, length):
        val1 = geometry_msgs.msg.PointStamped()
        _v40 = val1.header
        start = end
        end += 4
        (_v40.seq,) = _struct_I.unpack(str[start:end])
        _v41 = _v40.stamp
        _x = _v41
        start = end
        end += 8
        (_x.secs, _x.nsecs,) = _struct_2I.unpack(str[start:end])
        start = end
        end += 4
        (length,) = _struct_I.unpack(str[start:end])
        start = end
        end += length
        _v40.frame_id = str[start:end]
        _v42 = val1.point
        _x = _v42
        start = end
        end += 24
        (_x.x, _x.y, _x.z,) = _struct_3d.unpack(str[start:end])
        self.fold_traj.smooth_edges.append(val1)
      start = end
      end += 1
      (self.fold_traj.ignore_smooth,) = _struct_B.unpack(str[start:end])
      self.fold_traj.ignore_smooth = bool(self.fold_traj.ignore_smooth)
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      pattern = '<%sd'%length
      start = end
      end += struct.calcsize(pattern)
      self.fold_traj.tilts = struct.unpack(pattern, str[start:end])
      start = end
      end += 1
      (self.fold_traj.red,) = _struct_B.unpack(str[start:end])
      self.fold_traj.red = bool(self.fold_traj.red)
      return self
    except struct.error, e:
      raise roslib.message.DeserializationError(e) #most likely buffer underfill


  def serialize_numpy(self, buff, numpy):
    """
    serialize message with numpy array types into buffer
    @param buff: buffer
    @type  buff: StringIO
    @param numpy: numpy python module
    @type  numpy module
    """
    try:
      length = len(self.fold_traj.approach_points)
      buff.write(_struct_I.pack(length))
      for val1 in self.fold_traj.approach_points:
        _v43 = val1.header
        buff.write(_struct_I.pack(_v43.seq))
        _v44 = _v43.stamp
        _x = _v44
        buff.write(_struct_2I.pack(_x.secs, _x.nsecs))
        _x = _v43.frame_id
        length = len(_x)
        buff.write(struct.pack('<I%ss'%length, length, _x))
        _v45 = val1.point
        _x = _v45
        buff.write(_struct_3d.pack(_x.x, _x.y, _x.z))
      length = len(self.fold_traj.grip_points)
      buff.write(_struct_I.pack(length))
      for val1 in self.fold_traj.grip_points:
        _v46 = val1.header
        buff.write(_struct_I.pack(_v46.seq))
        _v47 = _v46.stamp
        _x = _v47
        buff.write(_struct_2I.pack(_x.secs, _x.nsecs))
        _x = _v46.frame_id
        length = len(_x)
        buff.write(struct.pack('<I%ss'%length, length, _x))
        _v48 = val1.point
        _x = _v48
        buff.write(_struct_3d.pack(_x.x, _x.y, _x.z))
      length = len(self.fold_traj.quarter_points)
      buff.write(_struct_I.pack(length))
      for val1 in self.fold_traj.quarter_points:
        _v49 = val1.header
        buff.write(_struct_I.pack(_v49.seq))
        _v50 = _v49.stamp
        _x = _v50
        buff.write(_struct_2I.pack(_x.secs, _x.nsecs))
        _x = _v49.frame_id
        length = len(_x)
        buff.write(struct.pack('<I%ss'%length, length, _x))
        _v51 = val1.point
        _x = _v51
        buff.write(_struct_3d.pack(_x.x, _x.y, _x.z))
      length = len(self.fold_traj.weight_points)
      buff.write(_struct_I.pack(length))
      for val1 in self.fold_traj.weight_points:
        _v52 = val1.header
        buff.write(_struct_I.pack(_v52.seq))
        _v53 = _v52.stamp
        _x = _v53
        buff.write(_struct_2I.pack(_x.secs, _x.nsecs))
        _x = _v52.frame_id
        length = len(_x)
        buff.write(struct.pack('<I%ss'%length, length, _x))
        _v54 = val1.point
        _x = _v54
        buff.write(_struct_3d.pack(_x.x, _x.y, _x.z))
      length = len(self.fold_traj.vertical_points)
      buff.write(_struct_I.pack(length))
      for val1 in self.fold_traj.vertical_points:
        _v55 = val1.header
        buff.write(_struct_I.pack(_v55.seq))
        _v56 = _v55.stamp
        _x = _v56
        buff.write(_struct_2I.pack(_x.secs, _x.nsecs))
        _x = _v55.frame_id
        length = len(_x)
        buff.write(struct.pack('<I%ss'%length, length, _x))
        _v57 = val1.point
        _x = _v57
        buff.write(_struct_3d.pack(_x.x, _x.y, _x.z))
      length = len(self.fold_traj.goal_points)
      buff.write(_struct_I.pack(length))
      for val1 in self.fold_traj.goal_points:
        _v58 = val1.header
        buff.write(_struct_I.pack(_v58.seq))
        _v59 = _v58.stamp
        _x = _v59
        buff.write(_struct_2I.pack(_x.secs, _x.nsecs))
        _x = _v58.frame_id
        length = len(_x)
        buff.write(struct.pack('<I%ss'%length, length, _x))
        _v60 = val1.point
        _x = _v60
        buff.write(_struct_3d.pack(_x.x, _x.y, _x.z))
      _x = self
      buff.write(_struct_3I.pack(_x.fold_traj.smooth_center.header.seq, _x.fold_traj.smooth_center.header.stamp.secs, _x.fold_traj.smooth_center.header.stamp.nsecs))
      _x = self.fold_traj.smooth_center.header.frame_id
      length = len(_x)
      buff.write(struct.pack('<I%ss'%length, length, _x))
      _x = self
      buff.write(_struct_3d.pack(_x.fold_traj.smooth_center.point.x, _x.fold_traj.smooth_center.point.y, _x.fold_traj.smooth_center.point.z))
      length = len(self.fold_traj.smooth_edges)
      buff.write(_struct_I.pack(length))
      for val1 in self.fold_traj.smooth_edges:
        _v61 = val1.header
        buff.write(_struct_I.pack(_v61.seq))
        _v62 = _v61.stamp
        _x = _v62
        buff.write(_struct_2I.pack(_x.secs, _x.nsecs))
        _x = _v61.frame_id
        length = len(_x)
        buff.write(struct.pack('<I%ss'%length, length, _x))
        _v63 = val1.point
        _x = _v63
        buff.write(_struct_3d.pack(_x.x, _x.y, _x.z))
      buff.write(_struct_B.pack(self.fold_traj.ignore_smooth))
      length = len(self.fold_traj.tilts)
      buff.write(_struct_I.pack(length))
      pattern = '<%sd'%length
      buff.write(self.fold_traj.tilts.tostring())
      buff.write(_struct_B.pack(self.fold_traj.red))
    except struct.error, se: self._check_types(se)
    except TypeError, te: self._check_types(te)

  def deserialize_numpy(self, str, numpy):
    """
    unpack serialized message in str into this message instance using numpy for array types
    @param str: byte array of serialized message
    @type  str: str
    @param numpy: numpy python module
    @type  numpy: module
    """
    try:
      if self.fold_traj is None:
        self.fold_traj = folding_msgs.msg.FoldTraj()
      end = 0
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      self.fold_traj.approach_points = []
      for i in xrange(0, length):
        val1 = geometry_msgs.msg.PointStamped()
        _v64 = val1.header
        start = end
        end += 4
        (_v64.seq,) = _struct_I.unpack(str[start:end])
        _v65 = _v64.stamp
        _x = _v65
        start = end
        end += 8
        (_x.secs, _x.nsecs,) = _struct_2I.unpack(str[start:end])
        start = end
        end += 4
        (length,) = _struct_I.unpack(str[start:end])
        start = end
        end += length
        _v64.frame_id = str[start:end]
        _v66 = val1.point
        _x = _v66
        start = end
        end += 24
        (_x.x, _x.y, _x.z,) = _struct_3d.unpack(str[start:end])
        self.fold_traj.approach_points.append(val1)
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      self.fold_traj.grip_points = []
      for i in xrange(0, length):
        val1 = geometry_msgs.msg.PointStamped()
        _v67 = val1.header
        start = end
        end += 4
        (_v67.seq,) = _struct_I.unpack(str[start:end])
        _v68 = _v67.stamp
        _x = _v68
        start = end
        end += 8
        (_x.secs, _x.nsecs,) = _struct_2I.unpack(str[start:end])
        start = end
        end += 4
        (length,) = _struct_I.unpack(str[start:end])
        start = end
        end += length
        _v67.frame_id = str[start:end]
        _v69 = val1.point
        _x = _v69
        start = end
        end += 24
        (_x.x, _x.y, _x.z,) = _struct_3d.unpack(str[start:end])
        self.fold_traj.grip_points.append(val1)
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      self.fold_traj.quarter_points = []
      for i in xrange(0, length):
        val1 = geometry_msgs.msg.PointStamped()
        _v70 = val1.header
        start = end
        end += 4
        (_v70.seq,) = _struct_I.unpack(str[start:end])
        _v71 = _v70.stamp
        _x = _v71
        start = end
        end += 8
        (_x.secs, _x.nsecs,) = _struct_2I.unpack(str[start:end])
        start = end
        end += 4
        (length,) = _struct_I.unpack(str[start:end])
        start = end
        end += length
        _v70.frame_id = str[start:end]
        _v72 = val1.point
        _x = _v72
        start = end
        end += 24
        (_x.x, _x.y, _x.z,) = _struct_3d.unpack(str[start:end])
        self.fold_traj.quarter_points.append(val1)
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      self.fold_traj.weight_points = []
      for i in xrange(0, length):
        val1 = geometry_msgs.msg.PointStamped()
        _v73 = val1.header
        start = end
        end += 4
        (_v73.seq,) = _struct_I.unpack(str[start:end])
        _v74 = _v73.stamp
        _x = _v74
        start = end
        end += 8
        (_x.secs, _x.nsecs,) = _struct_2I.unpack(str[start:end])
        start = end
        end += 4
        (length,) = _struct_I.unpack(str[start:end])
        start = end
        end += length
        _v73.frame_id = str[start:end]
        _v75 = val1.point
        _x = _v75
        start = end
        end += 24
        (_x.x, _x.y, _x.z,) = _struct_3d.unpack(str[start:end])
        self.fold_traj.weight_points.append(val1)
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      self.fold_traj.vertical_points = []
      for i in xrange(0, length):
        val1 = geometry_msgs.msg.PointStamped()
        _v76 = val1.header
        start = end
        end += 4
        (_v76.seq,) = _struct_I.unpack(str[start:end])
        _v77 = _v76.stamp
        _x = _v77
        start = end
        end += 8
        (_x.secs, _x.nsecs,) = _struct_2I.unpack(str[start:end])
        start = end
        end += 4
        (length,) = _struct_I.unpack(str[start:end])
        start = end
        end += length
        _v76.frame_id = str[start:end]
        _v78 = val1.point
        _x = _v78
        start = end
        end += 24
        (_x.x, _x.y, _x.z,) = _struct_3d.unpack(str[start:end])
        self.fold_traj.vertical_points.append(val1)
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      self.fold_traj.goal_points = []
      for i in xrange(0, length):
        val1 = geometry_msgs.msg.PointStamped()
        _v79 = val1.header
        start = end
        end += 4
        (_v79.seq,) = _struct_I.unpack(str[start:end])
        _v80 = _v79.stamp
        _x = _v80
        start = end
        end += 8
        (_x.secs, _x.nsecs,) = _struct_2I.unpack(str[start:end])
        start = end
        end += 4
        (length,) = _struct_I.unpack(str[start:end])
        start = end
        end += length
        _v79.frame_id = str[start:end]
        _v81 = val1.point
        _x = _v81
        start = end
        end += 24
        (_x.x, _x.y, _x.z,) = _struct_3d.unpack(str[start:end])
        self.fold_traj.goal_points.append(val1)
      _x = self
      start = end
      end += 12
      (_x.fold_traj.smooth_center.header.seq, _x.fold_traj.smooth_center.header.stamp.secs, _x.fold_traj.smooth_center.header.stamp.nsecs,) = _struct_3I.unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      self.fold_traj.smooth_center.header.frame_id = str[start:end]
      _x = self
      start = end
      end += 24
      (_x.fold_traj.smooth_center.point.x, _x.fold_traj.smooth_center.point.y, _x.fold_traj.smooth_center.point.z,) = _struct_3d.unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      self.fold_traj.smooth_edges = []
      for i in xrange(0, length):
        val1 = geometry_msgs.msg.PointStamped()
        _v82 = val1.header
        start = end
        end += 4
        (_v82.seq,) = _struct_I.unpack(str[start:end])
        _v83 = _v82.stamp
        _x = _v83
        start = end
        end += 8
        (_x.secs, _x.nsecs,) = _struct_2I.unpack(str[start:end])
        start = end
        end += 4
        (length,) = _struct_I.unpack(str[start:end])
        start = end
        end += length
        _v82.frame_id = str[start:end]
        _v84 = val1.point
        _x = _v84
        start = end
        end += 24
        (_x.x, _x.y, _x.z,) = _struct_3d.unpack(str[start:end])
        self.fold_traj.smooth_edges.append(val1)
      start = end
      end += 1
      (self.fold_traj.ignore_smooth,) = _struct_B.unpack(str[start:end])
      self.fold_traj.ignore_smooth = bool(self.fold_traj.ignore_smooth)
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      pattern = '<%sd'%length
      start = end
      end += struct.calcsize(pattern)
      self.fold_traj.tilts = numpy.frombuffer(str[start:end], dtype=numpy.float64, count=length)
      start = end
      end += 1
      (self.fold_traj.red,) = _struct_B.unpack(str[start:end])
      self.fold_traj.red = bool(self.fold_traj.red)
      return self
    except struct.error, e:
      raise roslib.message.DeserializationError(e) #most likely buffer underfill

_struct_I = roslib.message.struct_I
_struct_3I = struct.Struct("<3I")
_struct_B = struct.Struct("<B")
_struct_2I = struct.Struct("<2I")
_struct_3d = struct.Struct("<3d")
"""autogenerated by genmsg_py from ExecuteFoldResponse.msg. Do not edit."""
import roslib.message
import struct


class ExecuteFoldResponse(roslib.message.Message):
  _md5sum = "358e233cde0c8a8bcfea4ce193f8fc15"
  _type = "folding_srvs/ExecuteFoldResponse"
  _has_header = False #flag to mark the presence of a Header object
  _full_text = """bool success


"""
  __slots__ = ['success']
  _slot_types = ['bool']

  def __init__(self, *args, **kwds):
    """
    Constructor. Any message fields that are implicitly/explicitly
    set to None will be assigned a default value. The recommend
    use is keyword arguments as this is more robust to future message
    changes.  You cannot mix in-order arguments and keyword arguments.
    
    The available fields are:
       success
    
    @param args: complete set of field values, in .msg order
    @param kwds: use keyword arguments corresponding to message field names
    to set specific fields. 
    """
    if args or kwds:
      super(ExecuteFoldResponse, self).__init__(*args, **kwds)
      #message fields cannot be None, assign default values for those that are
      if self.success is None:
        self.success = False
    else:
      self.success = False

  def _get_types(self):
    """
    internal API method
    """
    return self._slot_types

  def serialize(self, buff):
    """
    serialize message into buffer
    @param buff: buffer
    @type  buff: StringIO
    """
    try:
      buff.write(_struct_B.pack(self.success))
    except struct.error, se: self._check_types(se)
    except TypeError, te: self._check_types(te)

  def deserialize(self, str):
    """
    unpack serialized message in str into this message instance
    @param str: byte array of serialized message
    @type  str: str
    """
    try:
      end = 0
      start = end
      end += 1
      (self.success,) = _struct_B.unpack(str[start:end])
      self.success = bool(self.success)
      return self
    except struct.error, e:
      raise roslib.message.DeserializationError(e) #most likely buffer underfill


  def serialize_numpy(self, buff, numpy):
    """
    serialize message with numpy array types into buffer
    @param buff: buffer
    @type  buff: StringIO
    @param numpy: numpy python module
    @type  numpy module
    """
    try:
      buff.write(_struct_B.pack(self.success))
    except struct.error, se: self._check_types(se)
    except TypeError, te: self._check_types(te)

  def deserialize_numpy(self, str, numpy):
    """
    unpack serialized message in str into this message instance using numpy for array types
    @param str: byte array of serialized message
    @type  str: str
    @param numpy: numpy python module
    @type  numpy: module
    """
    try:
      end = 0
      start = end
      end += 1
      (self.success,) = _struct_B.unpack(str[start:end])
      self.success = bool(self.success)
      return self
    except struct.error, e:
      raise roslib.message.DeserializationError(e) #most likely buffer underfill

_struct_I = roslib.message.struct_I
_struct_B = struct.Struct("<B")
class ExecuteFold(roslib.message.ServiceDefinition):
  _type          = 'folding_srvs/ExecuteFold'
  _md5sum = '3e78e4eec8da5701d6f887e332038580'
  _request_class  = ExecuteFoldRequest
  _response_class = ExecuteFoldResponse
